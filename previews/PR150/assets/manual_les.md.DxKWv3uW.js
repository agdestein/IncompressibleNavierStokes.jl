import{_ as n,C as r,c as d,o as p,aA as l,j as s,G as i,a as o,w as a}from"./chunks/framework.BCOXM0x7.js";const c="/IncompressibleNavierStokes.jl/previews/PR150/assets/resolution.DAYTxiG0.png",N=JSON.parse('{"title":"Large eddy simulation","description":"","frontmatter":{},"headers":[],"relativePath":"manual/les.md","filePath":"manual/les.md","lastUpdated":null}'),u={name:"manual/les.md"},m={class:"jldocstring custom-block",open:""},b={class:"jldocstring custom-block",open:""},h={class:"jldocstring custom-block",open:""},g={class:"jldocstring custom-block",open:""},y={class:"jldocstring custom-block",open:""};function f(k,e,_,v,T,j){const t=r("Badge");return p(),d("div",null,[e[20]||(e[20]=l('<h1 id="Large-eddy-simulation" tabindex="-1">Large eddy simulation <a class="header-anchor" href="#Large-eddy-simulation" aria-label="Permalink to &quot;Large eddy simulation {#Large-eddy-simulation}&quot;">​</a></h1><p>Depending on the problem specification, a given grid resolution may not be sufficient to resolve all spatial features of the flow. Consider the following example:</p><p><img src="'+c+'" alt=""></p><p>On the left, the grid spacing is too large to capt the smallest eddies in the flow. These eddies create sub-grid stresses that also affect the large scale features. The grid must be refined if we want to compute these stresses exactly.</p><p>On the right, the smallest spatial feature of the flow is fully resolved, and there are no sub-grid stresses. The equations can be solved without worrying about errors from unresolved features. This is known as <em>Direct Numerical Simulation</em> (DNS).</p><p>If refining the grid is too costly, a closure model can be used to predict the sub-grid stresses. The models only give an estimate for these stresses, and may need to be calibrated to the given problem. When used correctly, they can predict the evolution of the large fluid motions without computing the sub-grid motions themselves. This is known as <em>Large Eddy Simulation</em> (LES).</p><p>Eddy viscosity models add a local contribution to the global baseline viscosity. The baseline viscosity models transfer of energy from resolved to atomic scales. The new turbulent viscosity on the other hand, models energy transfer from resolved to unresolved scales. This non-constant field is computed from the local velocity field.</p><h2 id="Reference" tabindex="-1">Reference <a class="header-anchor" href="#Reference" aria-label="Permalink to &quot;Reference {#Reference}&quot;">​</a></h2>',8)),s("details",m,[s("summary",null,[e[0]||(e[0]=s("a",{id:"IncompressibleNavierStokes.collocate_tensor",href:"#IncompressibleNavierStokes.collocate_tensor"},[s("span",{class:"jlbinding"},"IncompressibleNavierStokes.collocate_tensor")],-1)),e[1]||(e[1]=o()),i(t,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),e[3]||(e[3]=s("p",null,[o("Collocate staggered tensor to the center of the cell. Put the tensor in a statically sized "),s("code",null,"SMatrix"),o(".")],-1)),i(t,{type:"info",class:"source-link",text:"source"},{default:a(()=>e[2]||(e[2]=[s("a",{href:"https://github.com/agdestein/IncompressibleNavierStokes.jl/blob/accc43875bb962d7ba7e0ec121f4cb10a7f953be/src/eddyviscosity.jl#L185",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[2]})]),s("details",b,[s("summary",null,[e[4]||(e[4]=s("a",{id:"IncompressibleNavierStokes.smagorinsky_closure!-NTuple{5, Any}",href:"#IncompressibleNavierStokes.smagorinsky_closure!-NTuple{5, Any}"},[s("span",{class:"jlbinding"},"IncompressibleNavierStokes.smagorinsky_closure!")],-1)),e[5]||(e[5]=o()),i(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[7]||(e[7]=l('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">smagorinsky_closure!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(f, u, θ, cache, setup)</span></span></code></pre></div><p>Apply Smagorinsky closure model.</p>',2)),i(t,{type:"info",class:"source-link",text:"source"},{default:a(()=>e[6]||(e[6]=[s("a",{href:"https://github.com/agdestein/IncompressibleNavierStokes.jl/blob/accc43875bb962d7ba7e0ec121f4cb10a7f953be/src/eddyviscosity.jl#L264",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[6]})]),s("details",h,[s("summary",null,[e[8]||(e[8]=s("a",{id:"IncompressibleNavierStokes.symmetrize!-Tuple{Any}",href:"#IncompressibleNavierStokes.symmetrize!-Tuple{Any}"},[s("span",{class:"jlbinding"},"IncompressibleNavierStokes.symmetrize!")],-1)),e[9]||(e[9]=o()),i(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[11]||(e[11]=l('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">symmetrize!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(G) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Any</span></span></code></pre></div><p>Compute symmetric part of tensor. Overwrite the upper diagonal of the tensor itself. The lower diagonal is not modified - don&#39;t use it!</p>',2)),i(t,{type:"info",class:"source-link",text:"source"},{default:a(()=>e[10]||(e[10]=[s("a",{href:"https://github.com/agdestein/IncompressibleNavierStokes.jl/blob/accc43875bb962d7ba7e0ec121f4cb10a7f953be/src/eddyviscosity.jl#L73",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[10]})]),s("details",g,[s("summary",null,[e[12]||(e[12]=s("a",{id:"IncompressibleNavierStokes.wale_closure!-NTuple{5, Any}",href:"#IncompressibleNavierStokes.wale_closure!-NTuple{5, Any}"},[s("span",{class:"jlbinding"},"IncompressibleNavierStokes.wale_closure!")],-1)),e[13]||(e[13]=o()),i(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[15]||(e[15]=l('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">wale_closure!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(f, u, θ, cache, setup)</span></span></code></pre></div><p>Apply WALE closure model.</p>',2)),i(t,{type:"info",class:"source-link",text:"source"},{default:a(()=>e[14]||(e[14]=[s("a",{href:"https://github.com/agdestein/IncompressibleNavierStokes.jl/blob/accc43875bb962d7ba7e0ec121f4cb10a7f953be/src/eddyviscosity.jl#L240",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[14]})]),s("details",y,[s("summary",null,[e[16]||(e[16]=s("a",{id:"IncompressibleNavierStokes.wale_viscosity!-NTuple{4, Any}",href:"#IncompressibleNavierStokes.wale_viscosity!-NTuple{4, Any}"},[s("span",{class:"jlbinding"},"IncompressibleNavierStokes.wale_viscosity!")],-1)),e[17]||(e[17]=o()),i(t,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),e[19]||(e[19]=l('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">wale_viscosity!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(visc, G_split, θ, setup)</span></span></code></pre></div><p>Apply WAL viscosity.</p>',2)),i(t,{type:"info",class:"source-link",text:"source"},{default:a(()=>e[18]||(e[18]=[s("a",{href:"https://github.com/agdestein/IncompressibleNavierStokes.jl/blob/accc43875bb962d7ba7e0ec121f4cb10a7f953be/src/eddyviscosity.jl#L181",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[18]})])])}const A=n(u,[["render",f]]);export{N as __pageData,A as default};
