import{_ as l,c as p,j as i,a as e,G as t,a5 as n,B as o,o as r}from"./chunks/framework.Dtw9AtxA.js";const T=JSON.parse('{"title":"Solvers","description":"","frontmatter":{},"headers":[],"relativePath":"manual/solver.md","filePath":"manual/solver.md","lastUpdated":null}'),h={name:"manual/solver.md"},k={class:"jldocstring custom-block",open:""},d={class:"jldocstring custom-block",open:""},c={class:"jldocstring custom-block",open:""},E={class:"jldocstring custom-block",open:""},g={class:"jldocstring custom-block",open:""},u={class:"jldocstring custom-block",open:""},y={class:"jldocstring custom-block",open:""},b={class:"jldocstring custom-block",open:""},m={class:"jldocstring custom-block",open:""},v={class:"jldocstring custom-block",open:""},f={class:"jldocstring custom-block",open:""};function F(C,s,j,S,N,B){const a=o("Badge");return r(),p("div",null,[s[33]||(s[33]=i("h1",{id:"solvers",tabindex:"-1"},[e("Solvers "),i("a",{class:"header-anchor",href:"#solvers","aria-label":'Permalink to "Solvers"'},"​")],-1)),s[34]||(s[34]=i("h2",{id:"Solvers-2",tabindex:"-1"},[e("Solvers "),i("a",{class:"header-anchor",href:"#Solvers-2","aria-label":'Permalink to "Solvers {#Solvers-2}"'},"​")],-1)),i("details",k,[i("summary",null,[s[0]||(s[0]=i("a",{id:"IncompressibleNavierStokes.get_cfl_timestep!-Tuple{Any, Any, Any}",href:"#IncompressibleNavierStokes.get_cfl_timestep!-Tuple{Any, Any, Any}"},[i("span",{class:"jlbinding"},"IncompressibleNavierStokes.get_cfl_timestep!")],-1)),s[1]||(s[1]=e()),t(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[2]||(s[2]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">get_cfl_timestep!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(buf, u, setup) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Any</span></span></code></pre></div><p>Get proposed maximum time step for convection and diffusion terms.</p><p><a href="https://github.com/agdestein/IncompressibleNavierStokes.jl/blob/50637927a525a968344139dbcf3d2468b69e2ecc/src/solver.jl#L100" target="_blank" rel="noreferrer">source</a></p>',3))]),i("details",d,[i("summary",null,[s[3]||(s[3]=i("a",{id:"IncompressibleNavierStokes.get_state-Tuple{Any}",href:"#IncompressibleNavierStokes.get_state-Tuple{Any}"},[i("span",{class:"jlbinding"},"IncompressibleNavierStokes.get_state")],-1)),s[4]||(s[4]=e()),t(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[5]||(s[5]=n(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">get_state</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    stepper</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> NamedTuple{(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:u</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:temp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:n</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NTuple{4, Any}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>Get state <code>(; u, temp, t, n)</code> from stepper.</p><p><a href="https://github.com/agdestein/IncompressibleNavierStokes.jl/blob/50637927a525a968344139dbcf3d2468b69e2ecc/src/solver.jl#L94" target="_blank" rel="noreferrer">source</a></p>`,3))]),i("details",c,[i("summary",null,[s[6]||(s[6]=i("a",{id:"IncompressibleNavierStokes.solve_unsteady-Tuple{}",href:"#IncompressibleNavierStokes.solve_unsteady-Tuple{}"},[i("span",{class:"jlbinding"},"IncompressibleNavierStokes.solve_unsteady")],-1)),s[7]||(s[7]=e()),t(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[8]||(s[8]=n(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">solve_unsteady</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    setup,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    tlims,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ustart,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    tempstart,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    method,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    psolver,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Δt,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Δt_min,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    cfl,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    n_adapt_Δt,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    docopy,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    processors,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    θ,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    cache</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Solve unsteady problem using <code>method</code>.</p><p>If <code>Δt</code> is a real number, it is rounded such that <code>(t_end - t_start) / Δt</code> is an integer. If <code>Δt = nothing</code>, the time step is chosen every <code>n_adapt_Δt</code> iteration with CFL-number <code>cfl</code>. If <code>Δt_min</code> is given, the adaptive time step never goes below it.</p><p>The <code>processors</code> are called after every time step.</p><p>Note that the <code>state</code> observable passed to the <code>processor.initialize</code> function contains vector living on the device, and you may have to move them back to the host using <code>Array(u)</code> in the processor.</p><p>Return <code>(; u, t), outputs</code>, where <code>outputs</code> is a named tuple with the outputs of <code>processors</code> with the same field names.</p><p><a href="https://github.com/agdestein/IncompressibleNavierStokes.jl/blob/50637927a525a968344139dbcf3d2468b69e2ecc/src/solver.jl#L1" target="_blank" rel="noreferrer">source</a></p>`,7))]),s[35]||(s[35]=i("h2",{id:"processors",tabindex:"-1"},[e("Processors "),i("a",{class:"header-anchor",href:"#processors","aria-label":'Permalink to "Processors"'},"​")],-1)),s[36]||(s[36]=i("p",null,[e("Processors can be used to process the solution in "),i("a",{href:"/IncompressibleNavierStokes.jl/previews/PR115/manual/solver#IncompressibleNavierStokes.solve_unsteady-Tuple{}"},[i("code",null,"solve_unsteady")]),e(" after every time step.")],-1)),i("details",E,[i("summary",null,[s[9]||(s[9]=i("a",{id:"IncompressibleNavierStokes.fieldsaver-Tuple{}",href:"#IncompressibleNavierStokes.fieldsaver-Tuple{}"},[i("span",{class:"jlbinding"},"IncompressibleNavierStokes.fieldsaver")],-1)),s[10]||(s[10]=e()),t(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[11]||(s[11]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">fieldsaver</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(; setup, nupdate)</span></span></code></pre></div><p>Create processor that stores the solution and time every <code>nupdate</code> time step.</p><p><a href="https://github.com/agdestein/IncompressibleNavierStokes.jl/blob/50637927a525a968344139dbcf3d2468b69e2ecc/src/processors.jl#L273" target="_blank" rel="noreferrer">source</a></p>',3))]),i("details",g,[i("summary",null,[s[12]||(s[12]=i("a",{id:"IncompressibleNavierStokes.observefield-Tuple{Any}",href:"#IncompressibleNavierStokes.observefield-Tuple{Any}"},[i("span",{class:"jlbinding"},"IncompressibleNavierStokes.observefield")],-1)),s[13]||(s[13]=e()),t(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[14]||(s[14]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">observefield</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(state; setup, fieldname, logtol, psolver)</span></span></code></pre></div><p>Observe field <code>fieldname</code> at pressure points.</p><p><a href="https://github.com/agdestein/IncompressibleNavierStokes.jl/blob/50637927a525a968344139dbcf3d2468b69e2ecc/src/processors.jl#L74" target="_blank" rel="noreferrer">source</a></p>',3))]),i("details",u,[i("summary",null,[s[15]||(s[15]=i("a",{id:"IncompressibleNavierStokes.observespectrum-Tuple{Any}",href:"#IncompressibleNavierStokes.observespectrum-Tuple{Any}"},[i("span",{class:"jlbinding"},"IncompressibleNavierStokes.observespectrum")],-1)),s[16]||(s[16]=e()),t(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[17]||(s[17]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">observespectrum</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(state; setup, npoint, a)</span></span></code></pre></div><p>Observe energy spectrum of <code>state</code>.</p><p><a href="https://github.com/agdestein/IncompressibleNavierStokes.jl/blob/50637927a525a968344139dbcf3d2468b69e2ecc/src/processors.jl#L288" target="_blank" rel="noreferrer">source</a></p>',3))]),i("details",y,[i("summary",null,[s[18]||(s[18]=i("a",{id:"IncompressibleNavierStokes.processor",href:"#IncompressibleNavierStokes.processor"},[i("span",{class:"jlbinding"},"IncompressibleNavierStokes.processor")],-1)),s[19]||(s[19]=e()),t(a,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),s[20]||(s[20]=n(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">processor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    initialize</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> NamedTuple{(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:initialize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:finalize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Tuple{Any, IncompressibleNavierStokes.var&quot;#265#266&quot;}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">processor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    initialize,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    finalize</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> NamedTuple{(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:initialize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:finalize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Tuple{Any, Any}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>Process results from time stepping. Before time stepping, the <code>initialize</code> function is called on an observable of the time stepper <code>state</code>, returning <code>initialized</code>. The observable is updated every time step.</p><p>After timestepping, the <code>finalize</code> function is called on <code>initialized</code> and the final <code>state</code>.</p><p>See the following example:</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> initialize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(state)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    s </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Let&#39;s sum up the time steps&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(state) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">do</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (; n, t)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;The summand is </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">, the time is </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$t</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        s </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> s </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> n</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    end</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    s</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">finalize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(i, state) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;The final sum (at time t=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$(state</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">t)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">) is </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">p </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> processor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(initialize, finalize)</span></span></code></pre></div><p>When solved for 6 time steps from t=0 to t=2 the displayed output is</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Let&#39;s sum up the time steps</span></span>
<span class="line"><span>The summand is 0, the time is 0.0</span></span>
<span class="line"><span>The summand is 1, the time is 0.4</span></span>
<span class="line"><span>The summand is 2, the time is 0.8</span></span>
<span class="line"><span>The summand is 3, the time is 1.2</span></span>
<span class="line"><span>The summand is 4, the time is 1.6</span></span>
<span class="line"><span>The summand is 5, the time is 2.0</span></span>
<span class="line"><span>The final sum (at time t=2.0) is 15</span></span></code></pre></div><p><a href="https://github.com/agdestein/IncompressibleNavierStokes.jl/blob/50637927a525a968344139dbcf3d2468b69e2ecc/src/processors.jl#L1" target="_blank" rel="noreferrer">source</a></p>`,8))]),i("details",b,[i("summary",null,[s[21]||(s[21]=i("a",{id:"IncompressibleNavierStokes.save_vtk-Tuple{Any}",href:"#IncompressibleNavierStokes.save_vtk-Tuple{Any}"},[i("span",{class:"jlbinding"},"IncompressibleNavierStokes.save_vtk")],-1)),s[22]||(s[22]=e()),t(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[23]||(s[23]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">save_vtk</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(state; setup, filename, kwargs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Save fields to vtk file.</p><p>The <code>kwargs</code> are passed to <a href="/IncompressibleNavierStokes.jl/previews/PR115/manual/solver#IncompressibleNavierStokes.snapshotsaver-Tuple{Any}"><code>snapshotsaver</code></a>.</p><p><a href="https://github.com/agdestein/IncompressibleNavierStokes.jl/blob/50637927a525a968344139dbcf3d2468b69e2ecc/src/processors.jl#L234" target="_blank" rel="noreferrer">source</a></p>',4))]),i("details",m,[i("summary",null,[s[24]||(s[24]=i("a",{id:"IncompressibleNavierStokes.snapshotsaver-Tuple{Any}",href:"#IncompressibleNavierStokes.snapshotsaver-Tuple{Any}"},[i("span",{class:"jlbinding"},"IncompressibleNavierStokes.snapshotsaver")],-1)),s[25]||(s[25]=e()),t(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[26]||(s[26]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">snapshotsaver</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(state; setup, fieldnames, psolver)</span></span></code></pre></div><p>In the case of a 2D setup, the velocity field is saved as a 3D vector with a z-component of zero, as this seems to be preferred by ParaView.</p><p><a href="https://github.com/agdestein/IncompressibleNavierStokes.jl/blob/50637927a525a968344139dbcf3d2468b69e2ecc/src/processors.jl#L200" target="_blank" rel="noreferrer">source</a></p>',3))]),i("details",v,[i("summary",null,[s[27]||(s[27]=i("a",{id:"IncompressibleNavierStokes.timelogger-Tuple{}",href:"#IncompressibleNavierStokes.timelogger-Tuple{}"},[i("span",{class:"jlbinding"},"IncompressibleNavierStokes.timelogger")],-1)),s[28]||(s[28]=e()),t(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[29]||(s[29]=n(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">timelogger</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    showiter,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    showt,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    showdt,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    showmax,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    showspeed,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    nupdate</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> @NamedTuple</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{initialize</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">IncompressibleNavierStokes.var&quot;#268#270&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{Bool, Bool, Bool, Bool, Bool, Int64}, finalize</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">IncompressibleNavierStokes.var&quot;#265#266&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>Create processor that logs time step information.</p><p><a href="https://github.com/agdestein/IncompressibleNavierStokes.jl/blob/50637927a525a968344139dbcf3d2468b69e2ecc/src/processors.jl#L42" target="_blank" rel="noreferrer">source</a></p>`,3))]),i("details",f,[i("summary",null,[s[30]||(s[30]=i("a",{id:"IncompressibleNavierStokes.vtk_writer-Tuple{}",href:"#IncompressibleNavierStokes.vtk_writer-Tuple{}"},[i("span",{class:"jlbinding"},"IncompressibleNavierStokes.vtk_writer")],-1)),s[31]||(s[31]=e()),t(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[32]||(s[32]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">vtk_writer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(; setup, nupdate, dir, filename, kwargs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Create processor that writes the solution every <code>nupdate</code> time steps to a VTK file. The resulting Paraview data collection file is stored in <code>&quot;$dir/$filename.pvd&quot;</code>. The <code>kwargs</code> are passed to <a href="/IncompressibleNavierStokes.jl/previews/PR115/manual/solver#IncompressibleNavierStokes.snapshotsaver-Tuple{Any}"><code>snapshotsaver</code></a>.</p><p><a href="https://github.com/agdestein/IncompressibleNavierStokes.jl/blob/50637927a525a968344139dbcf3d2468b69e2ecc/src/processors.jl#L246" target="_blank" rel="noreferrer">source</a></p>',3))])])}const A=l(h,[["render",F]]);export{T as __pageData,A as default};
