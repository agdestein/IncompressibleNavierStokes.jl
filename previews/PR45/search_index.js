var documenterSearchIndex = {"docs":
[{"location":"references/#References","page":"References","title":"References","text":"","category":"section"},{"location":"references/","page":"References","title":"References","text":"<div class=\"citation canonical\"><dl><dt>[1]</dt>\n<dd>\n<div id=\"Kochkov2021\">D. Kochkov, J. A. Smith, A. Alieva, Q. Wang, M. P. Brenner and S. Hoyer. <a href='https://doi.org/10.1073\\%2Fpnas.2101784118'><i>Machine learning-accelerated computational fluid dynamics</i></a>. <a href='https://doi.org/10.1073/pnas.2101784118'>Proceedings of the National Academy of Sciences <b>118</b> (2021)</a>.</div>\n</dd><dt>[2]</dt>\n<dd>\n<div id=\"Kurz2022\">M. Kurz, P. Offenhäuser and A. Beck. <a href='https://arxiv.org/abs/2206.11038'><i>Deep Reinforcement Learning for Turbulence Modeling in Large Eddy Simulations</i></a>. <a href='https://doi.org/10.48550/ARXIV.2206.11038'> (2022)</a>.</div>\n</dd><dt>[3]</dt>\n<dd>\n<div id=\"List2022\">B. List, L.-W. Chen and N. Thuerey. <a href='https://arxiv.org/abs/2202.06988'><i>Learned Turbulence Modelling with Differentiable Fluid Solvers</i></a>, <a href='https://doi.org/10.48550/ARXIV.2202.06988'>arxiv:2202.06988 (2022)</a>.</div>\n</dd><dt>[4]</dt>\n<dd>\n<div id=\"Harlow1965\">F. H. Harlow and J. E. Welch. <a href='https://aip.scitation.org/doi/abs/10.1063/1.1761178'><i>\n        Numerical Calculation of Time‐Dependent Viscous Incompressible Flow\n        of Fluid with Free Surface\n    </i></a>. <a href='https://doi.org/10.1063/1.1761178'>The Physics of Fluids <b>8</b>, 2182-2189 (1965)</a>, <a href='https://arxiv.org/abs/https://aip.scitation.org/doi/pdf/10.1063/1.1761178'>arXiv:https://aip.scitation.org/doi/pdf/10.1063/1.1761178</a>.</div>\n</dd><dt>[5]</dt>\n<dd>\n<div id=\"Sanderse2012\">B. Sanderse and B. Koren. <a href='https://www.sciencedirect.com/science/article/pii/S0021999111006838'><i>Accuracy analysis of explicit Runge–Kutta methods applied to the incompressible Navier–Stokes equations</i></a>. <a href='https://doi.org/https://doi.org/10.1016/j.jcp.2011.11.028'>Journal of Computational Physics <b>231</b>, 3041-3063 (2012)</a>.</div>\n</dd><dt>[6]</dt>\n<dd>\n<div id=\"Sanderse2013\">B. Sanderse. <a href='https://www.sciencedirect.com/science/article/pii/S002199911200424X'><i>Energy-conserving Runge–Kutta methods for the incompressible Navier–Stokes equations</i></a>. <a href='https://doi.org/https://doi.org/10.1016/j.jcp.2012.07.039'>Journal of Computational Physics <b>233</b>, 100-131 (2013)</a>.</div>\n</dd><dt>[7]</dt>\n<dd>\n<div id=\"Sanderse2014\">B. Sanderse, R. Verstappen and B. Koren. <a href='https://www.sciencedirect.com/science/article/pii/S0021999113006670'><i>Boundary treatment for fourth-order staggered mesh discretizations of the incompressible Navier–Stokes equations</i></a>. <a href='https://doi.org/https://doi.org/10.1016/j.jcp.2013.10.002'>Journal of Computational Physics <b>257</b>, 1472-1505 (2014)</a>. Physics-compatible numerical methods.</div>\n</dd>\n</dl></div>","category":"page"},{"location":"equations/time/#Time-discretization","page":"Time discretization","title":"Time discretization","text":"","category":"section"},{"location":"equations/time/","page":"Time discretization","title":"Time discretization","text":"The spatially discretized Navier-Stokes equations form a differential-algebraic system, with an ODE for the velocity","category":"page"},{"location":"equations/time/","page":"Time discretization","title":"Time discretization","text":"Omega fracmathrmd V_hmathrmd t = F(V_h) - (G p_h + y_G)","category":"page"},{"location":"equations/time/","page":"Time discretization","title":"Time discretization","text":"and an algebraic equation for the pressure","category":"page"},{"location":"equations/time/","page":"Time discretization","title":"Time discretization","text":"A p_h = g","category":"page"},{"location":"equations/time/#Runge-Kutta-methods","page":"Time discretization","title":"Runge-Kutta methods","text":"","category":"section"},{"location":"equations/time/","page":"Time discretization","title":"Time discretization","text":"See Sanderse [5] [6].","category":"page"},{"location":"features/gpu/#GPU-Support","page":"GPU Support","title":"GPU Support","text":"","category":"section"},{"location":"features/gpu/","page":"GPU Support","title":"GPU Support","text":"If an Nvidia GPU is available, the default CPU solve call","category":"page"},{"location":"features/gpu/","page":"GPU Support","title":"GPU Support","text":"solve_unsteady(setup, V₀, p₀, tlims; kwargs...)","category":"page"},{"location":"features/gpu/","page":"GPU Support","title":"GPU Support","text":"can now be replaced with the following:","category":"page"},{"location":"features/gpu/","page":"GPU Support","title":"GPU Support","text":"using CUDA\nsolve_unsteady(\n    setup, V₀, p₀, tlims;\n    device = cu,\n    kwargs...\n)","category":"page"},{"location":"features/gpu/","page":"GPU Support","title":"GPU Support","text":"This moves the arrays and sparse operators to the GPU, outsourcing all array operations to the GPU.","category":"page"},{"location":"features/gpu/","page":"GPU Support","title":"GPU Support","text":"Limitations:","category":"page"},{"location":"features/gpu/","page":"GPU Support","title":"GPU Support","text":"DirectPressureSolver is currently not supported on the GPU. Use CGPressureSolver instead.\nUnsteady boundary conditions are currently not supported on the GPU.\nThe code uses sparse matrices for discretization. For finer grids, these can take up a lot of memory on the GPU.\nThis has not been tested with other GPU interfaces, such as\nAMDGPU.jl\nMetal.jl\noneAPI.jl\nIf they start supporting sparse matrices and fast Fourier transforms they could also be used. Alternatively, IncompressibleNavierStokes may also be refactored to apply the operators without assembling any sparse arrays.","category":"page"},{"location":"generated/LidDrivenCavity2D/","page":"Tutorial: Lid-Driven Cavity (2D)","title":"Tutorial: Lid-Driven Cavity (2D)","text":"EditURL = \"../../../examples/LidDrivenCavity2D.jl\"","category":"page"},{"location":"generated/LidDrivenCavity2D/#Tutorial:-Lid-Driven-Cavity-2D","page":"Tutorial: Lid-Driven Cavity (2D)","title":"Tutorial: Lid-Driven Cavity - 2D","text":"","category":"section"},{"location":"generated/LidDrivenCavity2D/","page":"Tutorial: Lid-Driven Cavity (2D)","title":"Tutorial: Lid-Driven Cavity (2D)","text":"In this example we consider a box with a moving lid. The velocity is initially at rest. The solution should reach at steady state equilibrium after a certain time. The same steady state should be obtained when solving a steady state problem.","category":"page"},{"location":"generated/LidDrivenCavity2D/","page":"Tutorial: Lid-Driven Cavity (2D)","title":"Tutorial: Lid-Driven Cavity (2D)","text":"We start by loading packages. A Makie plotting backend is needed for plotting. GLMakie creates an interactive window (useful for real-time plotting), but does not work when building this example on GitHub. CairoMakie makes high-quality static vector-graphics plots.","category":"page"},{"location":"generated/LidDrivenCavity2D/","page":"Tutorial: Lid-Driven Cavity (2D)","title":"Tutorial: Lid-Driven Cavity (2D)","text":"using CairoMakie\nusing IncompressibleNavierStokes","category":"page"},{"location":"generated/LidDrivenCavity2D/","page":"Tutorial: Lid-Driven Cavity (2D)","title":"Tutorial: Lid-Driven Cavity (2D)","text":"Case name for saving results","category":"page"},{"location":"generated/LidDrivenCavity2D/","page":"Tutorial: Lid-Driven Cavity (2D)","title":"Tutorial: Lid-Driven Cavity (2D)","text":"name = \"LidDrivenCavity2D\"","category":"page"},{"location":"generated/LidDrivenCavity2D/","page":"Tutorial: Lid-Driven Cavity (2D)","title":"Tutorial: Lid-Driven Cavity (2D)","text":"The code allows for using different floating point number types, including single precision (Float32) and double precision (Float64). On the CPU, the speed is not really different, but double precision uses twice as much memory as single precision. When running on the GPU, single precision is preferred. Half precision (Float16) is also an option, but then the values should be scaled judiciously to avoid vanishing digits when applying differential operators of the form \"right minus left divided by small distance\".","category":"page"},{"location":"generated/LidDrivenCavity2D/","page":"Tutorial: Lid-Driven Cavity (2D)","title":"Tutorial: Lid-Driven Cavity (2D)","text":"# T = Float16\n# T = Float32\nT = Float64","category":"page"},{"location":"generated/LidDrivenCavity2D/","page":"Tutorial: Lid-Driven Cavity (2D)","title":"Tutorial: Lid-Driven Cavity (2D)","text":"Note how floating point type hygiene is enforced in the following using T to avoid mixing different precisions.","category":"page"},{"location":"generated/LidDrivenCavity2D/","page":"Tutorial: Lid-Driven Cavity (2D)","title":"Tutorial: Lid-Driven Cavity (2D)","text":"We can also choose to do the computations on a different device. By default, the computations are performed on the host (CPU). An optional device keyword allows for moving arrays and operator to a different device such as a GPU. Currently, only Nvidia GPUs with CUDA support sparse operators and fast Fourier transform used by IncompressibleNavierStokes.","category":"page"},{"location":"generated/LidDrivenCavity2D/","page":"Tutorial: Lid-Driven Cavity (2D)","title":"Tutorial: Lid-Driven Cavity (2D)","text":"For CPU","category":"page"},{"location":"generated/LidDrivenCavity2D/","page":"Tutorial: Lid-Driven Cavity (2D)","title":"Tutorial: Lid-Driven Cavity (2D)","text":"device = identity","category":"page"},{"location":"generated/LidDrivenCavity2D/","page":"Tutorial: Lid-Driven Cavity (2D)","title":"Tutorial: Lid-Driven Cavity (2D)","text":"For GPU (note that cu converts to Float32)","category":"page"},{"location":"generated/LidDrivenCavity2D/","page":"Tutorial: Lid-Driven Cavity (2D)","title":"Tutorial: Lid-Driven Cavity (2D)","text":"# using CUDA\n# device = cu","category":"page"},{"location":"generated/LidDrivenCavity2D/","page":"Tutorial: Lid-Driven Cavity (2D)","title":"Tutorial: Lid-Driven Cavity (2D)","text":"Available viscosity models are:","category":"page"},{"location":"generated/LidDrivenCavity2D/","page":"Tutorial: Lid-Driven Cavity (2D)","title":"Tutorial: Lid-Driven Cavity (2D)","text":"LaminarModel,\nMixingLengthModel,\nSmagorinskyModel, and\nQRModel.","category":"page"},{"location":"generated/LidDrivenCavity2D/","page":"Tutorial: Lid-Driven Cavity (2D)","title":"Tutorial: Lid-Driven Cavity (2D)","text":"They all take a Reynolds number as a parameter. Here we choose a moderate Reynolds number. Note how we pass the floating point type.","category":"page"},{"location":"generated/LidDrivenCavity2D/","page":"Tutorial: Lid-Driven Cavity (2D)","title":"Tutorial: Lid-Driven Cavity (2D)","text":"viscosity_model = LaminarModel(; Re = T(1_000))","category":"page"},{"location":"generated/LidDrivenCavity2D/","page":"Tutorial: Lid-Driven Cavity (2D)","title":"Tutorial: Lid-Driven Cavity (2D)","text":"Dirichlet boundary conditions are specified as plain Julia functions. They are marked by the :dirichlet symbol. Other possible BC types are :periodic, :symmetric, and :pressure.","category":"page"},{"location":"generated/LidDrivenCavity2D/","page":"Tutorial: Lid-Driven Cavity (2D)","title":"Tutorial: Lid-Driven Cavity (2D)","text":"u_bc(x, y, t) = y ≈ 1 ? T(1) : T(0)\nv_bc(x, y, t) = T(0)\nbc_type = (;\n    u = (; x = (:dirichlet, :dirichlet), y = (:dirichlet, :dirichlet)),\n    v = (; x = (:dirichlet, :dirichlet), y = (:dirichlet, :dirichlet)),\n)","category":"page"},{"location":"generated/LidDrivenCavity2D/","page":"Tutorial: Lid-Driven Cavity (2D)","title":"Tutorial: Lid-Driven Cavity (2D)","text":"We create a two-dimensional domain with a box of size [1, 1]. The grid is created as a Cartesian product between two vectors. We add a refinement near the walls.","category":"page"},{"location":"generated/LidDrivenCavity2D/","page":"Tutorial: Lid-Driven Cavity (2D)","title":"Tutorial: Lid-Driven Cavity (2D)","text":"n = 40\nlims = (T(0), T(1))\nx = cosine_grid(lims..., n)\ny = cosine_grid(lims..., n)\nplot_grid(x, y)","category":"page"},{"location":"generated/LidDrivenCavity2D/","page":"Tutorial: Lid-Driven Cavity (2D)","title":"Tutorial: Lid-Driven Cavity (2D)","text":"We can now build the setup and assemble operators. A 3D setup is built if we also provide a vector of z-coordinates.","category":"page"},{"location":"generated/LidDrivenCavity2D/","page":"Tutorial: Lid-Driven Cavity (2D)","title":"Tutorial: Lid-Driven Cavity (2D)","text":"setup = Setup(x, y; viscosity_model, u_bc, v_bc, bc_type);\nnothing #hide","category":"page"},{"location":"generated/LidDrivenCavity2D/","page":"Tutorial: Lid-Driven Cavity (2D)","title":"Tutorial: Lid-Driven Cavity (2D)","text":"The pressure solver is used to solve the pressure Poisson equation. Available solvers are","category":"page"},{"location":"generated/LidDrivenCavity2D/","page":"Tutorial: Lid-Driven Cavity (2D)","title":"Tutorial: Lid-Driven Cavity (2D)","text":"DirectPressureSolver (only for CPU with Float64)\nCGPressureSolver\nSpectralPressureSolver (only for periodic boundary conditions and uniform grids)","category":"page"},{"location":"generated/LidDrivenCavity2D/","page":"Tutorial: Lid-Driven Cavity (2D)","title":"Tutorial: Lid-Driven Cavity (2D)","text":"pressure_solver = DirectPressureSolver(setup)","category":"page"},{"location":"generated/LidDrivenCavity2D/","page":"Tutorial: Lid-Driven Cavity (2D)","title":"Tutorial: Lid-Driven Cavity (2D)","text":"We will solve for a time interval of ten seconds.","category":"page"},{"location":"generated/LidDrivenCavity2D/","page":"Tutorial: Lid-Driven Cavity (2D)","title":"Tutorial: Lid-Driven Cavity (2D)","text":"t_start, t_end = tlims = (T(0), T(10))","category":"page"},{"location":"generated/LidDrivenCavity2D/","page":"Tutorial: Lid-Driven Cavity (2D)","title":"Tutorial: Lid-Driven Cavity (2D)","text":"The initial conditions are defined as plain Julia functions.","category":"page"},{"location":"generated/LidDrivenCavity2D/","page":"Tutorial: Lid-Driven Cavity (2D)","title":"Tutorial: Lid-Driven Cavity (2D)","text":"initial_velocity_u(x, y) = zero(x)\ninitial_velocity_v(x, y) = zero(x)\ninitial_pressure(x, y) = zero(x)\nV₀, p₀ = create_initial_conditions(\n    setup,\n    initial_velocity_u,\n    initial_velocity_v,\n    t_start;\n    initial_pressure,\n    pressure_solver,\n)","category":"page"},{"location":"generated/LidDrivenCavity2D/#Solve-problems","page":"Tutorial: Lid-Driven Cavity (2D)","title":"Solve problems","text":"","category":"section"},{"location":"generated/LidDrivenCavity2D/","page":"Tutorial: Lid-Driven Cavity (2D)","title":"Tutorial: Lid-Driven Cavity (2D)","text":"Problems can be solved.","category":"page"},{"location":"generated/LidDrivenCavity2D/","page":"Tutorial: Lid-Driven Cavity (2D)","title":"Tutorial: Lid-Driven Cavity (2D)","text":"The solve_steady_state function is for computing a state where the right hand side of the momentum equation is zero.","category":"page"},{"location":"generated/LidDrivenCavity2D/","page":"Tutorial: Lid-Driven Cavity (2D)","title":"Tutorial: Lid-Driven Cavity (2D)","text":"V, p = solve_steady_state(setup, V₀, p₀)","category":"page"},{"location":"generated/LidDrivenCavity2D/","page":"Tutorial: Lid-Driven Cavity (2D)","title":"Tutorial: Lid-Driven Cavity (2D)","text":"For this test case, the same steady state may be obtained by solving an unsteady problem for a sufficiently long time.","category":"page"},{"location":"generated/LidDrivenCavity2D/","page":"Tutorial: Lid-Driven Cavity (2D)","title":"Tutorial: Lid-Driven Cavity (2D)","text":"Iteration processors are called after every nupdate time steps. This can be useful for logging, plotting, or saving results. Their respective outputs are later returned by solve_unsteady.","category":"page"},{"location":"generated/LidDrivenCavity2D/","page":"Tutorial: Lid-Driven Cavity (2D)","title":"Tutorial: Lid-Driven Cavity (2D)","text":"processors = (\n    field_plotter(device(setup); nupdate = 50),\n    # energy_history_plotter(device(setup); nupdate = 1),\n    # energy_spectrum_plotter(device(setup); nupdate = 100),\n    # animator(device(setup), \"vorticity.mkv\"; nupdate = 4),\n    vtk_writer(setup; nupdate = 100, dir = \"output/$name\", filename = \"solution\"),\n    # field_saver(setup; nupdate = 10),\n    step_logger(; nupdate = 1000),\n);\nnothing #hide","category":"page"},{"location":"generated/LidDrivenCavity2D/","page":"Tutorial: Lid-Driven Cavity (2D)","title":"Tutorial: Lid-Driven Cavity (2D)","text":"By default, a standard fourth order Runge-Kutta method is used. If we don't provide the time step explicitly, an adaptive time step is used.","category":"page"},{"location":"generated/LidDrivenCavity2D/","page":"Tutorial: Lid-Driven Cavity (2D)","title":"Tutorial: Lid-Driven Cavity (2D)","text":"V, p, outputs =\n    solve_unsteady(setup, V₀, p₀, tlims; Δt = T(0.001), processors, pressure_solver, device);\nnothing #hide","category":"page"},{"location":"generated/LidDrivenCavity2D/#Post-process","page":"Tutorial: Lid-Driven Cavity (2D)","title":"Post-process","text":"","category":"section"},{"location":"generated/LidDrivenCavity2D/","page":"Tutorial: Lid-Driven Cavity (2D)","title":"Tutorial: Lid-Driven Cavity (2D)","text":"We may visualize or export the computed fields (V, p)","category":"page"},{"location":"generated/LidDrivenCavity2D/","page":"Tutorial: Lid-Driven Cavity (2D)","title":"Tutorial: Lid-Driven Cavity (2D)","text":"Export fields to VTK. The file output/solution.vti may be opened for visulization in ParaView. This is particularly useful for inspecting results from 3D simulations.","category":"page"},{"location":"generated/LidDrivenCavity2D/","page":"Tutorial: Lid-Driven Cavity (2D)","title":"Tutorial: Lid-Driven Cavity (2D)","text":"save_vtk(setup, V, p, t_end, \"output/solution\")","category":"page"},{"location":"generated/LidDrivenCavity2D/","page":"Tutorial: Lid-Driven Cavity (2D)","title":"Tutorial: Lid-Driven Cavity (2D)","text":"Plot pressure","category":"page"},{"location":"generated/LidDrivenCavity2D/","page":"Tutorial: Lid-Driven Cavity (2D)","title":"Tutorial: Lid-Driven Cavity (2D)","text":"plot_pressure(setup, p)","category":"page"},{"location":"generated/LidDrivenCavity2D/","page":"Tutorial: Lid-Driven Cavity (2D)","title":"Tutorial: Lid-Driven Cavity (2D)","text":"Plot velocity. Note the time stamp used for computing boundary conditions, if any.","category":"page"},{"location":"generated/LidDrivenCavity2D/","page":"Tutorial: Lid-Driven Cavity (2D)","title":"Tutorial: Lid-Driven Cavity (2D)","text":"plot_velocity(setup, V, t_end)","category":"page"},{"location":"generated/LidDrivenCavity2D/","page":"Tutorial: Lid-Driven Cavity (2D)","title":"Tutorial: Lid-Driven Cavity (2D)","text":"Plot vorticity (with custom levels)","category":"page"},{"location":"generated/LidDrivenCavity2D/","page":"Tutorial: Lid-Driven Cavity (2D)","title":"Tutorial: Lid-Driven Cavity (2D)","text":"levels = [-7, -5, -4, -3, -2, -1, -0.5, 0, 0.5, 1, 2, 3, 7]\nplot_vorticity(setup, V, t_end; levels)","category":"page"},{"location":"generated/LidDrivenCavity2D/","page":"Tutorial: Lid-Driven Cavity (2D)","title":"Tutorial: Lid-Driven Cavity (2D)","text":"Plot streamfunction. Note the time stamp used for computing boundary conditions, if any","category":"page"},{"location":"generated/LidDrivenCavity2D/","page":"Tutorial: Lid-Driven Cavity (2D)","title":"Tutorial: Lid-Driven Cavity (2D)","text":"plot_streamfunction(setup, V, t_end)","category":"page"},{"location":"generated/LidDrivenCavity2D/","page":"Tutorial: Lid-Driven Cavity (2D)","title":"Tutorial: Lid-Driven Cavity (2D)","text":"In addition, the tuple outputs contains quantities from our processors.","category":"page"},{"location":"generated/LidDrivenCavity2D/","page":"Tutorial: Lid-Driven Cavity (2D)","title":"Tutorial: Lid-Driven Cavity (2D)","text":"The field_plotter returns the field plot figure.","category":"page"},{"location":"generated/LidDrivenCavity2D/","page":"Tutorial: Lid-Driven Cavity (2D)","title":"Tutorial: Lid-Driven Cavity (2D)","text":"outputs[1]","category":"page"},{"location":"generated/LidDrivenCavity2D/","page":"Tutorial: Lid-Driven Cavity (2D)","title":"Tutorial: Lid-Driven Cavity (2D)","text":"The vtk_writer returns the file name of the ParaView collection file. This allows for visualizing the solution time series in ParaView.","category":"page"},{"location":"generated/LidDrivenCavity2D/","page":"Tutorial: Lid-Driven Cavity (2D)","title":"Tutorial: Lid-Driven Cavity (2D)","text":"outputs[2]","category":"page"},{"location":"generated/LidDrivenCavity2D/","page":"Tutorial: Lid-Driven Cavity (2D)","title":"Tutorial: Lid-Driven Cavity (2D)","text":"The logger returns nothing.","category":"page"},{"location":"generated/LidDrivenCavity2D/","page":"Tutorial: Lid-Driven Cavity (2D)","title":"Tutorial: Lid-Driven Cavity (2D)","text":"outputs[3]","category":"page"},{"location":"generated/LidDrivenCavity2D/","page":"Tutorial: Lid-Driven Cavity (2D)","title":"Tutorial: Lid-Driven Cavity (2D)","text":"","category":"page"},{"location":"generated/LidDrivenCavity2D/","page":"Tutorial: Lid-Driven Cavity (2D)","title":"Tutorial: Lid-Driven Cavity (2D)","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/PlanarMixing2D/","page":"Planar Mixing (2D)","title":"Planar Mixing (2D)","text":"EditURL = \"../../../examples/PlanarMixing2D.jl\"","category":"page"},{"location":"generated/PlanarMixing2D/#Planar-mixing-2D","page":"Planar Mixing (2D)","title":"Planar mixing - 2D","text":"","category":"section"},{"location":"generated/PlanarMixing2D/","page":"Planar Mixing (2D)","title":"Planar Mixing (2D)","text":"Planar mixing example, as presented in [3].","category":"page"},{"location":"generated/PlanarMixing2D/","page":"Planar Mixing (2D)","title":"Planar Mixing (2D)","text":"We start by loading packages. A Makie plotting backend is needed for plotting. GLMakie creates an interactive window (useful for real-time plotting), but does not work when building this example on GitHub. CairoMakie makes high-quality static vector-graphics plots.","category":"page"},{"location":"generated/PlanarMixing2D/","page":"Planar Mixing (2D)","title":"Planar Mixing (2D)","text":"using CairoMakie\nusing IncompressibleNavierStokes","category":"page"},{"location":"generated/PlanarMixing2D/","page":"Planar Mixing (2D)","title":"Planar Mixing (2D)","text":"Case name for saving results","category":"page"},{"location":"generated/PlanarMixing2D/","page":"Planar Mixing (2D)","title":"Planar Mixing (2D)","text":"name = \"PlanarMixing2D\"","category":"page"},{"location":"generated/PlanarMixing2D/","page":"Planar Mixing (2D)","title":"Planar Mixing (2D)","text":"Viscosity model","category":"page"},{"location":"generated/PlanarMixing2D/","page":"Planar Mixing (2D)","title":"Planar Mixing (2D)","text":"viscosity_model = LaminarModel(; Re = 500.0)","category":"page"},{"location":"generated/PlanarMixing2D/","page":"Planar Mixing (2D)","title":"Planar Mixing (2D)","text":"Boundary conditions: Unsteady BC requires time derivatives","category":"page"},{"location":"generated/PlanarMixing2D/","page":"Planar Mixing (2D)","title":"Planar Mixing (2D)","text":"ΔU = 1.0\nŪ = 1.0\nϵ = (0.082Ū, 0.012Ū)\nn = (0.4π, 0.3π)\nω = (0.22, 0.11)\nu_bc(x, y, t) =\n    x ≈ 0.0 ?\n    1.0 + ΔU / 2 * tanh(2y) + sum(@. ϵ * (1 - tanh(y / 2)^2) * cos(n * y) * sin(ω * t)) :\n    0.0\nv_bc(x, y, t) = 0.0\ndudt_bc(x, y, t) =\n    x ≈ 0.0 ? sum(@. ϵ * (1 - tanh(y / 2)^2) * cos(n * y) * ω * cos(ω * t)) : 0.0\ndvdt_bc(x, y, t) = 0.0\nbc_type = (;\n    u = (; x = (:dirichlet, :pressure), y = (:symmetric, :symmetric)),\n    v = (; x = (:dirichlet, :symmetric), y = (:pressure, :pressure)),\n)","category":"page"},{"location":"generated/PlanarMixing2D/","page":"Planar Mixing (2D)","title":"Planar Mixing (2D)","text":"A 2D grid is a Cartesian product of two vectors","category":"page"},{"location":"generated/PlanarMixing2D/","page":"Planar Mixing (2D)","title":"Planar Mixing (2D)","text":"n = 64\n# n = 256\nx = LinRange(0.0, 256.0, 4n)\ny = LinRange(-32.0, 32.0, n)\nplot_grid(x, y)","category":"page"},{"location":"generated/PlanarMixing2D/","page":"Planar Mixing (2D)","title":"Planar Mixing (2D)","text":"Build setup and assemble operators","category":"page"},{"location":"generated/PlanarMixing2D/","page":"Planar Mixing (2D)","title":"Planar Mixing (2D)","text":"setup = Setup(x, y; viscosity_model, u_bc, v_bc, dudt_bc, dvdt_bc, bc_type);\nnothing #hide","category":"page"},{"location":"generated/PlanarMixing2D/","page":"Planar Mixing (2D)","title":"Planar Mixing (2D)","text":"Time interval","category":"page"},{"location":"generated/PlanarMixing2D/","page":"Planar Mixing (2D)","title":"Planar Mixing (2D)","text":"t_start, t_end = tlims = (0.0, 100.0)","category":"page"},{"location":"generated/PlanarMixing2D/","page":"Planar Mixing (2D)","title":"Planar Mixing (2D)","text":"Initial conditions","category":"page"},{"location":"generated/PlanarMixing2D/","page":"Planar Mixing (2D)","title":"Planar Mixing (2D)","text":"initial_velocity_u(x, y) = u_bc(0.0, y, 0.0)\ninitial_velocity_v(x, y) = 0.0\ninitial_pressure(x, y) = 0.0\nV₀, p₀ = create_initial_conditions(\n    setup,\n    initial_velocity_u,\n    initial_velocity_v,\n    t_start;\n    initial_pressure,\n);\nnothing #hide","category":"page"},{"location":"generated/PlanarMixing2D/","page":"Planar Mixing (2D)","title":"Planar Mixing (2D)","text":"Iteration processors","category":"page"},{"location":"generated/PlanarMixing2D/","page":"Planar Mixing (2D)","title":"Planar Mixing (2D)","text":"processors = (\n    field_plotter(setup; nupdate = 1),\n    # energy_history_plotter(setup; nupdate = 1),\n    # energy_spectrum_plotter(setup; nupdate = 100),\n    # animator(setup, \"vorticity.mkv\"; nupdate = 4),\n    # vtk_writer(setup; nupdate = 10, dir = \"output/$name\", filename = \"solution\"),\n    # field_saver(setup; nupdate = 10),\n    step_logger(; nupdate = 1),\n);\nnothing #hide","category":"page"},{"location":"generated/PlanarMixing2D/","page":"Planar Mixing (2D)","title":"Planar Mixing (2D)","text":"Solve unsteady problem","category":"page"},{"location":"generated/PlanarMixing2D/","page":"Planar Mixing (2D)","title":"Planar Mixing (2D)","text":"V, p, outputs = solve_unsteady(\n    setup,\n    V₀,\n    p₀,\n    tlims;\n    method = RK44P2(),\n    Δt = 0.1,\n    processors,\n    inplace = true,\n);\ncurrent_figure()","category":"page"},{"location":"generated/PlanarMixing2D/#Post-process","page":"Planar Mixing (2D)","title":"Post-process","text":"","category":"section"},{"location":"generated/PlanarMixing2D/","page":"Planar Mixing (2D)","title":"Planar Mixing (2D)","text":"We may visualize or export the computed fields (V, p)","category":"page"},{"location":"generated/PlanarMixing2D/","page":"Planar Mixing (2D)","title":"Planar Mixing (2D)","text":"Export to VTK","category":"page"},{"location":"generated/PlanarMixing2D/","page":"Planar Mixing (2D)","title":"Planar Mixing (2D)","text":"save_vtk(setup, V, p, t_end, \"output/solution\")","category":"page"},{"location":"generated/PlanarMixing2D/","page":"Planar Mixing (2D)","title":"Planar Mixing (2D)","text":"Plot pressure","category":"page"},{"location":"generated/PlanarMixing2D/","page":"Planar Mixing (2D)","title":"Planar Mixing (2D)","text":"plot_pressure(setup, p)","category":"page"},{"location":"generated/PlanarMixing2D/","page":"Planar Mixing (2D)","title":"Planar Mixing (2D)","text":"Plot velocity","category":"page"},{"location":"generated/PlanarMixing2D/","page":"Planar Mixing (2D)","title":"Planar Mixing (2D)","text":"plot_velocity(setup, V, t_end)","category":"page"},{"location":"generated/PlanarMixing2D/","page":"Planar Mixing (2D)","title":"Planar Mixing (2D)","text":"Plot vorticity","category":"page"},{"location":"generated/PlanarMixing2D/","page":"Planar Mixing (2D)","title":"Planar Mixing (2D)","text":"plot_vorticity(setup, V, t_end)","category":"page"},{"location":"generated/PlanarMixing2D/","page":"Planar Mixing (2D)","title":"Planar Mixing (2D)","text":"Plot streamfunction","category":"page"},{"location":"generated/PlanarMixing2D/","page":"Planar Mixing (2D)","title":"Planar Mixing (2D)","text":"plot_streamfunction(setup, V, t_end)","category":"page"},{"location":"generated/PlanarMixing2D/","page":"Planar Mixing (2D)","title":"Planar Mixing (2D)","text":"","category":"page"},{"location":"generated/PlanarMixing2D/","page":"Planar Mixing (2D)","title":"Planar Mixing (2D)","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/BackwardFacingStep2D/","page":"Backward Facing Step (2D)","title":"Backward Facing Step (2D)","text":"EditURL = \"../../../examples/BackwardFacingStep2D.jl\"","category":"page"},{"location":"generated/BackwardFacingStep2D/#Backward-Facing-Step-2D","page":"Backward Facing Step (2D)","title":"Backward Facing Step - 2D","text":"","category":"section"},{"location":"generated/BackwardFacingStep2D/","page":"Backward Facing Step (2D)","title":"Backward Facing Step (2D)","text":"In this example we consider a channel with walls at the top and bottom, and a step at the left with a parabolic inflow. Initially the velocity is an extension of the inflow, but as time passes the velocity finds a new steady state.","category":"page"},{"location":"generated/BackwardFacingStep2D/","page":"Backward Facing Step (2D)","title":"Backward Facing Step (2D)","text":"We start by loading packages. A Makie plotting backend is needed for plotting. GLMakie creates an interactive window (useful for real-time plotting), but does not work when building this example on GitHub. CairoMakie makes high-quality static vector-graphics plots.","category":"page"},{"location":"generated/BackwardFacingStep2D/","page":"Backward Facing Step (2D)","title":"Backward Facing Step (2D)","text":"using CairoMakie\nusing IncompressibleNavierStokes","category":"page"},{"location":"generated/BackwardFacingStep2D/","page":"Backward Facing Step (2D)","title":"Backward Facing Step (2D)","text":"Case name for saving results","category":"page"},{"location":"generated/BackwardFacingStep2D/","page":"Backward Facing Step (2D)","title":"Backward Facing Step (2D)","text":"name = \"BackwardFacingStep2D\"","category":"page"},{"location":"generated/BackwardFacingStep2D/","page":"Backward Facing Step (2D)","title":"Backward Facing Step (2D)","text":"Viscosity model","category":"page"},{"location":"generated/BackwardFacingStep2D/","page":"Backward Facing Step (2D)","title":"Backward Facing Step (2D)","text":"viscosity_model = LaminarModel(; Re = 3000.0)","category":"page"},{"location":"generated/BackwardFacingStep2D/","page":"Backward Facing Step (2D)","title":"Backward Facing Step (2D)","text":"Boundary conditions: steady inflow on the top half","category":"page"},{"location":"generated/BackwardFacingStep2D/","page":"Backward Facing Step (2D)","title":"Backward Facing Step (2D)","text":"u_bc(x, y, t) = x ≈ 0 && y ≥ 0 ? 24y * (1 / 2 - y) : 0.0\nv_bc(x, y, t) = 0.0\nbc_type = (;\n    u = (; x = (:dirichlet, :pressure), y = (:dirichlet, :dirichlet)),\n    v = (; x = (:dirichlet, :symmetric), y = (:dirichlet, :dirichlet)),\n)","category":"page"},{"location":"generated/BackwardFacingStep2D/","page":"Backward Facing Step (2D)","title":"Backward Facing Step (2D)","text":"A 2D grid is a Cartesian product of two vectors. Here we refine the grid near the walls.","category":"page"},{"location":"generated/BackwardFacingStep2D/","page":"Backward Facing Step (2D)","title":"Backward Facing Step (2D)","text":"x = LinRange(0.0, 10.0, 300)\ny = cosine_grid(-0.5, 0.5, 50)\nplot_grid(x, y)","category":"page"},{"location":"generated/BackwardFacingStep2D/","page":"Backward Facing Step (2D)","title":"Backward Facing Step (2D)","text":"Build setup and assemble operators","category":"page"},{"location":"generated/BackwardFacingStep2D/","page":"Backward Facing Step (2D)","title":"Backward Facing Step (2D)","text":"setup = Setup(x, y; viscosity_model, u_bc, v_bc, bc_type);\nnothing #hide","category":"page"},{"location":"generated/BackwardFacingStep2D/","page":"Backward Facing Step (2D)","title":"Backward Facing Step (2D)","text":"Time interval","category":"page"},{"location":"generated/BackwardFacingStep2D/","page":"Backward Facing Step (2D)","title":"Backward Facing Step (2D)","text":"t_start, t_end = tlims = (0.0, 7.0)","category":"page"},{"location":"generated/BackwardFacingStep2D/","page":"Backward Facing Step (2D)","title":"Backward Facing Step (2D)","text":"Initial conditions (extend inflow)","category":"page"},{"location":"generated/BackwardFacingStep2D/","page":"Backward Facing Step (2D)","title":"Backward Facing Step (2D)","text":"initial_velocity_u(x, y) = y ≥ 0.0 ? 24y * (1 / 2 - y) : 0.0\ninitial_velocity_v(x, y) = 0.0\ninitial_pressure(x, y) = 0.0\nV₀, p₀ = create_initial_conditions(\n    setup,\n    initial_velocity_u,\n    initial_velocity_v,\n    t_start;\n    initial_pressure,\n);\nnothing #hide","category":"page"},{"location":"generated/BackwardFacingStep2D/","page":"Backward Facing Step (2D)","title":"Backward Facing Step (2D)","text":"Solve steady state problem","category":"page"},{"location":"generated/BackwardFacingStep2D/","page":"Backward Facing Step (2D)","title":"Backward Facing Step (2D)","text":"V, p = solve_steady_state(setup, V₀, p₀);\nnothing #hide","category":"page"},{"location":"generated/BackwardFacingStep2D/","page":"Backward Facing Step (2D)","title":"Backward Facing Step (2D)","text":"Iteration processors","category":"page"},{"location":"generated/BackwardFacingStep2D/","page":"Backward Facing Step (2D)","title":"Backward Facing Step (2D)","text":"processors = (\n    field_plotter(setup; nupdate = 5),\n    # energy_history_plotter(setup; nupdate = 10),\n    # energy_spectrum_plotter(setup; nupdate = 10),\n    # animator(setup, \"vorticity.mkv\"; nupdate = 4),\n    # vtk_writer(setup; nupdate = 20, dir = \"output/$name\", filename = \"solution\"),\n    # field_saver(setup; nupdate = 10),\n    step_logger(; nupdate = 1),\n);\nnothing #hide","category":"page"},{"location":"generated/BackwardFacingStep2D/","page":"Backward Facing Step (2D)","title":"Backward Facing Step (2D)","text":"Solve unsteady problem","category":"page"},{"location":"generated/BackwardFacingStep2D/","page":"Backward Facing Step (2D)","title":"Backward Facing Step (2D)","text":"V, p, outputs = solve_unsteady(setup, V₀, p₀, tlims; Δt = 0.002, processors, inplace = true)\ncurrent_figure()","category":"page"},{"location":"generated/BackwardFacingStep2D/#Post-process","page":"Backward Facing Step (2D)","title":"Post-process","text":"","category":"section"},{"location":"generated/BackwardFacingStep2D/","page":"Backward Facing Step (2D)","title":"Backward Facing Step (2D)","text":"We may visualize or export the computed fields (V, p)","category":"page"},{"location":"generated/BackwardFacingStep2D/","page":"Backward Facing Step (2D)","title":"Backward Facing Step (2D)","text":"Export to VTK","category":"page"},{"location":"generated/BackwardFacingStep2D/","page":"Backward Facing Step (2D)","title":"Backward Facing Step (2D)","text":"save_vtk(setup, V, p, t_end, \"output/solution\")","category":"page"},{"location":"generated/BackwardFacingStep2D/","page":"Backward Facing Step (2D)","title":"Backward Facing Step (2D)","text":"Plot pressure","category":"page"},{"location":"generated/BackwardFacingStep2D/","page":"Backward Facing Step (2D)","title":"Backward Facing Step (2D)","text":"plot_pressure(setup, p)","category":"page"},{"location":"generated/BackwardFacingStep2D/","page":"Backward Facing Step (2D)","title":"Backward Facing Step (2D)","text":"Plot velocity","category":"page"},{"location":"generated/BackwardFacingStep2D/","page":"Backward Facing Step (2D)","title":"Backward Facing Step (2D)","text":"plot_velocity(setup, V, t_end)","category":"page"},{"location":"generated/BackwardFacingStep2D/","page":"Backward Facing Step (2D)","title":"Backward Facing Step (2D)","text":"Plot vorticity","category":"page"},{"location":"generated/BackwardFacingStep2D/","page":"Backward Facing Step (2D)","title":"Backward Facing Step (2D)","text":"plot_vorticity(setup, V, t_end)","category":"page"},{"location":"generated/BackwardFacingStep2D/","page":"Backward Facing Step (2D)","title":"Backward Facing Step (2D)","text":"Plot streamfunction","category":"page"},{"location":"generated/BackwardFacingStep2D/","page":"Backward Facing Step (2D)","title":"Backward Facing Step (2D)","text":"plot_streamfunction(setup, V, t_end)","category":"page"},{"location":"generated/BackwardFacingStep2D/","page":"Backward Facing Step (2D)","title":"Backward Facing Step (2D)","text":"","category":"page"},{"location":"generated/BackwardFacingStep2D/","page":"Backward Facing Step (2D)","title":"Backward Facing Step (2D)","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/DecayingTurbulence2D/","page":"Decaying Turbulunce (2D)","title":"Decaying Turbulunce (2D)","text":"EditURL = \"../../../examples/DecayingTurbulence2D.jl\"","category":"page"},{"location":"generated/DecayingTurbulence2D/#Decaying-Homogeneous-Isotropic-Turbulence-2D","page":"Decaying Turbulunce (2D)","title":"Decaying Homogeneous Isotropic Turbulence - 2D","text":"","category":"section"},{"location":"generated/DecayingTurbulence2D/","page":"Decaying Turbulunce (2D)","title":"Decaying Turbulunce (2D)","text":"In this example we consider decaying homogeneous isotropic turbulence, similar to the cases considered in [1] and [2]. The initial velocity field is created randomly, but with a specific energy spectrum. Due to viscous dissipation, the turbulent features eventually group to form larger visible eddies.","category":"page"},{"location":"generated/DecayingTurbulence2D/","page":"Decaying Turbulunce (2D)","title":"Decaying Turbulunce (2D)","text":"We start by loading packages. A Makie plotting backend is needed for plotting. GLMakie creates an interactive window (useful for real-time plotting), but does not work when building this example on GitHub. CairoMakie makes high-quality static vector-graphics plots.","category":"page"},{"location":"generated/DecayingTurbulence2D/","page":"Decaying Turbulunce (2D)","title":"Decaying Turbulunce (2D)","text":"using CairoMakie\nusing IncompressibleNavierStokes","category":"page"},{"location":"generated/DecayingTurbulence2D/","page":"Decaying Turbulunce (2D)","title":"Decaying Turbulunce (2D)","text":"Case name for saving results","category":"page"},{"location":"generated/DecayingTurbulence2D/","page":"Decaying Turbulunce (2D)","title":"Decaying Turbulunce (2D)","text":"name = \"DecayingTurbulence2D\"","category":"page"},{"location":"generated/DecayingTurbulence2D/","page":"Decaying Turbulunce (2D)","title":"Decaying Turbulunce (2D)","text":"Floating point precision","category":"page"},{"location":"generated/DecayingTurbulence2D/","page":"Decaying Turbulunce (2D)","title":"Decaying Turbulunce (2D)","text":"T = Float32","category":"page"},{"location":"generated/DecayingTurbulence2D/","page":"Decaying Turbulunce (2D)","title":"Decaying Turbulunce (2D)","text":"To use CPU: Do not move any arrays","category":"page"},{"location":"generated/DecayingTurbulence2D/","page":"Decaying Turbulunce (2D)","title":"Decaying Turbulunce (2D)","text":"device = identity","category":"page"},{"location":"generated/DecayingTurbulence2D/","page":"Decaying Turbulunce (2D)","title":"Decaying Turbulunce (2D)","text":"To use GPU, use cu to move arrays to the GPU. Note: cu converts to Float32","category":"page"},{"location":"generated/DecayingTurbulence2D/","page":"Decaying Turbulunce (2D)","title":"Decaying Turbulunce (2D)","text":"# using CUDA\n# device = cu","category":"page"},{"location":"generated/DecayingTurbulence2D/","page":"Decaying Turbulunce (2D)","title":"Decaying Turbulunce (2D)","text":"Viscosity model","category":"page"},{"location":"generated/DecayingTurbulence2D/","page":"Decaying Turbulunce (2D)","title":"Decaying Turbulunce (2D)","text":"viscosity_model = LaminarModel(; Re = T(10_000))","category":"page"},{"location":"generated/DecayingTurbulence2D/","page":"Decaying Turbulunce (2D)","title":"Decaying Turbulunce (2D)","text":"A 2D grid is a Cartesian product of two vectors","category":"page"},{"location":"generated/DecayingTurbulence2D/","page":"Decaying Turbulunce (2D)","title":"Decaying Turbulunce (2D)","text":"n = 256\nlims = (T(0), T(1))\nx = LinRange(lims..., n + 1)\ny = LinRange(lims..., n + 1)","category":"page"},{"location":"generated/DecayingTurbulence2D/","page":"Decaying Turbulunce (2D)","title":"Decaying Turbulunce (2D)","text":"plot_grid(x, y)","category":"page"},{"location":"generated/DecayingTurbulence2D/","page":"Decaying Turbulunce (2D)","title":"Decaying Turbulunce (2D)","text":"Build setup and assemble operators","category":"page"},{"location":"generated/DecayingTurbulence2D/","page":"Decaying Turbulunce (2D)","title":"Decaying Turbulunce (2D)","text":"setup = Setup(x, y; viscosity_model);\nnothing #hide","category":"page"},{"location":"generated/DecayingTurbulence2D/","page":"Decaying Turbulunce (2D)","title":"Decaying Turbulunce (2D)","text":"Since the grid is uniform and identical for x and y, we may use a specialized spectral pressure solver","category":"page"},{"location":"generated/DecayingTurbulence2D/","page":"Decaying Turbulunce (2D)","title":"Decaying Turbulunce (2D)","text":"pressure_solver = SpectralPressureSolver(setup);\nnothing #hide","category":"page"},{"location":"generated/DecayingTurbulence2D/","page":"Decaying Turbulunce (2D)","title":"Decaying Turbulunce (2D)","text":"Initial conditions","category":"page"},{"location":"generated/DecayingTurbulence2D/","page":"Decaying Turbulunce (2D)","title":"Decaying Turbulunce (2D)","text":"V₀, p₀ = random_field(setup; A = T(1_000_000), σ = T(30), s = 5, pressure_solver);\nnothing #hide","category":"page"},{"location":"generated/DecayingTurbulence2D/","page":"Decaying Turbulunce (2D)","title":"Decaying Turbulunce (2D)","text":"Iteration processors","category":"page"},{"location":"generated/DecayingTurbulence2D/","page":"Decaying Turbulunce (2D)","title":"Decaying Turbulunce (2D)","text":"processors = (\n    field_plotter(device(setup); nupdate = 20),\n    energy_history_plotter(device(setup); nupdate = 20, displayfig = false),\n    energy_spectrum_plotter(device(setup); nupdate = 20, displayfig = false),\n    # animator(device(setup), \"vorticity.mp4\"; nupdate = 16),\n    # vtk_writer(setup; nupdate = 10, dir = \"output/$name\", filename = \"solution\"),\n    # field_saver(setup; nupdate = 10),\n    step_logger(; nupdate = 100),\n);\nnothing #hide","category":"page"},{"location":"generated/DecayingTurbulence2D/","page":"Decaying Turbulunce (2D)","title":"Decaying Turbulunce (2D)","text":"Time interval","category":"page"},{"location":"generated/DecayingTurbulence2D/","page":"Decaying Turbulunce (2D)","title":"Decaying Turbulunce (2D)","text":"t_start, t_end = tlims = (T(0), T(1.0))","category":"page"},{"location":"generated/DecayingTurbulence2D/","page":"Decaying Turbulunce (2D)","title":"Decaying Turbulunce (2D)","text":"Solve unsteady problem","category":"page"},{"location":"generated/DecayingTurbulence2D/","page":"Decaying Turbulunce (2D)","title":"Decaying Turbulunce (2D)","text":"V, p, outputs = solve_unsteady(\n    setup,\n    V₀,\n    p₀,\n    tlims;\n    Δt = T(0.001),\n    processors,\n    pressure_solver,\n    inplace = true,\n    device,\n);\nnothing #hide","category":"page"},{"location":"generated/DecayingTurbulence2D/","page":"Decaying Turbulunce (2D)","title":"Decaying Turbulunce (2D)","text":"Field plot","category":"page"},{"location":"generated/DecayingTurbulence2D/","page":"Decaying Turbulunce (2D)","title":"Decaying Turbulunce (2D)","text":"outputs[1]","category":"page"},{"location":"generated/DecayingTurbulence2D/","page":"Decaying Turbulunce (2D)","title":"Decaying Turbulunce (2D)","text":"Energy history plot","category":"page"},{"location":"generated/DecayingTurbulence2D/","page":"Decaying Turbulunce (2D)","title":"Decaying Turbulunce (2D)","text":"outputs[2]","category":"page"},{"location":"generated/DecayingTurbulence2D/","page":"Decaying Turbulunce (2D)","title":"Decaying Turbulunce (2D)","text":"Energy spectrum plot","category":"page"},{"location":"generated/DecayingTurbulence2D/","page":"Decaying Turbulunce (2D)","title":"Decaying Turbulunce (2D)","text":"outputs[3]","category":"page"},{"location":"generated/DecayingTurbulence2D/#Post-process","page":"Decaying Turbulunce (2D)","title":"Post-process","text":"","category":"section"},{"location":"generated/DecayingTurbulence2D/","page":"Decaying Turbulunce (2D)","title":"Decaying Turbulunce (2D)","text":"We may visualize or export the computed fields (V, p)","category":"page"},{"location":"generated/DecayingTurbulence2D/","page":"Decaying Turbulunce (2D)","title":"Decaying Turbulunce (2D)","text":"Export to VTK","category":"page"},{"location":"generated/DecayingTurbulence2D/","page":"Decaying Turbulunce (2D)","title":"Decaying Turbulunce (2D)","text":"save_vtk(setup, V, p, t_end, \"output/solution\")","category":"page"},{"location":"generated/DecayingTurbulence2D/","page":"Decaying Turbulunce (2D)","title":"Decaying Turbulunce (2D)","text":"Plot pressure","category":"page"},{"location":"generated/DecayingTurbulence2D/","page":"Decaying Turbulunce (2D)","title":"Decaying Turbulunce (2D)","text":"plot_pressure(setup, p)","category":"page"},{"location":"generated/DecayingTurbulence2D/","page":"Decaying Turbulunce (2D)","title":"Decaying Turbulunce (2D)","text":"Plot velocity","category":"page"},{"location":"generated/DecayingTurbulence2D/","page":"Decaying Turbulunce (2D)","title":"Decaying Turbulunce (2D)","text":"plot_velocity(setup, V, t_end)","category":"page"},{"location":"generated/DecayingTurbulence2D/","page":"Decaying Turbulunce (2D)","title":"Decaying Turbulunce (2D)","text":"Plot vorticity","category":"page"},{"location":"generated/DecayingTurbulence2D/","page":"Decaying Turbulunce (2D)","title":"Decaying Turbulunce (2D)","text":"plot_vorticity(setup, V, t_end)","category":"page"},{"location":"generated/DecayingTurbulence2D/","page":"Decaying Turbulunce (2D)","title":"Decaying Turbulunce (2D)","text":"","category":"page"},{"location":"generated/DecayingTurbulence2D/","page":"Decaying Turbulunce (2D)","title":"Decaying Turbulunce (2D)","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/ShearLayer2D/","page":"Shear Layer (2D)","title":"Shear Layer (2D)","text":"EditURL = \"../../../examples/ShearLayer2D.jl\"","category":"page"},{"location":"generated/ShearLayer2D/#Shear-layer-2D","page":"Shear Layer (2D)","title":"Shear layer - 2D","text":"","category":"section"},{"location":"generated/ShearLayer2D/","page":"Shear Layer (2D)","title":"Shear Layer (2D)","text":"Shear layer example.","category":"page"},{"location":"generated/ShearLayer2D/","page":"Shear Layer (2D)","title":"Shear Layer (2D)","text":"We start by loading packages. A Makie plotting backend is needed for plotting. GLMakie creates an interactive window (useful for real-time plotting), but does not work when building this example on GitHub. CairoMakie makes high-quality static vector-graphics plots.","category":"page"},{"location":"generated/ShearLayer2D/","page":"Shear Layer (2D)","title":"Shear Layer (2D)","text":"using CairoMakie\nusing IncompressibleNavierStokes","category":"page"},{"location":"generated/ShearLayer2D/","page":"Shear Layer (2D)","title":"Shear Layer (2D)","text":"Case name for saving results","category":"page"},{"location":"generated/ShearLayer2D/","page":"Shear Layer (2D)","title":"Shear Layer (2D)","text":"name = \"ShearLayer2D\"","category":"page"},{"location":"generated/ShearLayer2D/","page":"Shear Layer (2D)","title":"Shear Layer (2D)","text":"Viscosity model","category":"page"},{"location":"generated/ShearLayer2D/","page":"Shear Layer (2D)","title":"Shear Layer (2D)","text":"viscosity_model = LaminarModel(; Re = Inf)","category":"page"},{"location":"generated/ShearLayer2D/","page":"Shear Layer (2D)","title":"Shear Layer (2D)","text":"A 2D grid is a Cartesian product of two vectors","category":"page"},{"location":"generated/ShearLayer2D/","page":"Shear Layer (2D)","title":"Shear Layer (2D)","text":"n = 100\nx = LinRange(0, 2π, n + 1)\ny = LinRange(0, 2π, n + 1)\nplot_grid(x, y)","category":"page"},{"location":"generated/ShearLayer2D/","page":"Shear Layer (2D)","title":"Shear Layer (2D)","text":"Build setup and assemble operators","category":"page"},{"location":"generated/ShearLayer2D/","page":"Shear Layer (2D)","title":"Shear Layer (2D)","text":"setup = Setup(x, y; viscosity_model);\nnothing #hide","category":"page"},{"location":"generated/ShearLayer2D/","page":"Shear Layer (2D)","title":"Shear Layer (2D)","text":"Time interval","category":"page"},{"location":"generated/ShearLayer2D/","page":"Shear Layer (2D)","title":"Shear Layer (2D)","text":"t_start, t_end = tlims = (0.0, 8.0)","category":"page"},{"location":"generated/ShearLayer2D/","page":"Shear Layer (2D)","title":"Shear Layer (2D)","text":"Initial conditions: We add 1 to u in order to make global momentum conservation less trivial","category":"page"},{"location":"generated/ShearLayer2D/","page":"Shear Layer (2D)","title":"Shear Layer (2D)","text":"d = π / 15\ne = 0.05\ninitial_velocity_u(x, y) = y ≤ π ? tanh((y - π / 2) / d) : tanh((3π / 2 - y) / d)\n# initial_velocity_u(x, y) = 1.0 + (y ≤ π ? tanh((y - π / 2) / d) : tanh((3π / 2 - y) / d))\ninitial_velocity_v(x, y) = e * sin(x)\ninitial_pressure(x, y) = 0.0\nV₀, p₀ = create_initial_conditions(\n    setup,\n    initial_velocity_u,\n    initial_velocity_v,\n    t_start;\n    initial_pressure,\n);\nnothing #hide","category":"page"},{"location":"generated/ShearLayer2D/","page":"Shear Layer (2D)","title":"Shear Layer (2D)","text":"Iteration processors","category":"page"},{"location":"generated/ShearLayer2D/","page":"Shear Layer (2D)","title":"Shear Layer (2D)","text":"processors = (\n    field_plotter(setup; nupdate = 1),\n    # energy_history_plotter(setup; nupdate = 1),\n    # energy_spectrum_plotter(setup; nupdate = 100),\n    # animator(setup, \"vorticity.mkv\"; nupdate = 4),\n    # vtk_writer(setup; nupdate = 10, dir = \"output/$name\", filename = \"solution\"),\n    # field_saver(setup; nupdate = 10),\n    step_logger(; nupdate = 1),\n);\nnothing #hide","category":"page"},{"location":"generated/ShearLayer2D/","page":"Shear Layer (2D)","title":"Shear Layer (2D)","text":"Solve unsteady problem","category":"page"},{"location":"generated/ShearLayer2D/","page":"Shear Layer (2D)","title":"Shear Layer (2D)","text":"V, p, outputs = solve_unsteady(\n    setup,\n    V₀,\n    p₀,\n    tlims;\n    method = RK44(),\n    Δt = 0.01,\n    processors,\n    inplace = true,\n);\ncurrent_figure()","category":"page"},{"location":"generated/ShearLayer2D/#Post-process","page":"Shear Layer (2D)","title":"Post-process","text":"","category":"section"},{"location":"generated/ShearLayer2D/","page":"Shear Layer (2D)","title":"Shear Layer (2D)","text":"We may visualize or export the computed fields (V, p)","category":"page"},{"location":"generated/ShearLayer2D/","page":"Shear Layer (2D)","title":"Shear Layer (2D)","text":"Export to VTK","category":"page"},{"location":"generated/ShearLayer2D/","page":"Shear Layer (2D)","title":"Shear Layer (2D)","text":"save_vtk(setup, V, p, t_end, \"output/solution\")","category":"page"},{"location":"generated/ShearLayer2D/","page":"Shear Layer (2D)","title":"Shear Layer (2D)","text":"Plot pressure","category":"page"},{"location":"generated/ShearLayer2D/","page":"Shear Layer (2D)","title":"Shear Layer (2D)","text":"plot_pressure(setup, p)","category":"page"},{"location":"generated/ShearLayer2D/","page":"Shear Layer (2D)","title":"Shear Layer (2D)","text":"Plot velocity","category":"page"},{"location":"generated/ShearLayer2D/","page":"Shear Layer (2D)","title":"Shear Layer (2D)","text":"plot_velocity(setup, V, t_end)","category":"page"},{"location":"generated/ShearLayer2D/","page":"Shear Layer (2D)","title":"Shear Layer (2D)","text":"Plot vorticity","category":"page"},{"location":"generated/ShearLayer2D/","page":"Shear Layer (2D)","title":"Shear Layer (2D)","text":"plot_vorticity(setup, V, t_end)","category":"page"},{"location":"generated/ShearLayer2D/","page":"Shear Layer (2D)","title":"Shear Layer (2D)","text":"Plot streamfunction","category":"page"},{"location":"generated/ShearLayer2D/","page":"Shear Layer (2D)","title":"Shear Layer (2D)","text":"# plot_streamfunction(setup, V, t_end)","category":"page"},{"location":"generated/ShearLayer2D/","page":"Shear Layer (2D)","title":"Shear Layer (2D)","text":"","category":"page"},{"location":"generated/ShearLayer2D/","page":"Shear Layer (2D)","title":"Shear Layer (2D)","text":"This page was generated using Literate.jl.","category":"page"},{"location":"equations/spatial/#Spatial-Discretization","page":"Spatial discretization","title":"Spatial Discretization","text":"","category":"section"},{"location":"equations/spatial/","page":"Spatial discretization","title":"Spatial discretization","text":"To discretize the incompressible Navier-Stokes equations, we will use finite volumes on a staggered Cartesian grid, as proposed by Harlow and Welsh [4]. We will use the notation of Sanderse [5] [6] [7]. For simplicity, we will illustrate everything in 2D. The 3D discretization is very similar, but more verbose.","category":"page"},{"location":"equations/spatial/#Finite-volumes","page":"Spatial discretization","title":"Finite volumes","text":"","category":"section"},{"location":"equations/spatial/","page":"Spatial discretization","title":"Spatial discretization","text":"The finite volumes are given by","category":"page"},{"location":"equations/spatial/","page":"Spatial discretization","title":"Spatial discretization","text":"Omega_i j = x_i -\nfrac12 x_i + frac12 times y_j - frac12 y_j +\nfrac12","category":"page"},{"location":"equations/spatial/","page":"Spatial discretization","title":"Spatial discretization","text":"They are fully defined by the vectors of volume faces x = (x_i + frac12)_i and y = (y_j + frac12)_j. Note that the components are not assumed to be uniformly spaced. But we do assume that they are strictly increasing.","category":"page"},{"location":"equations/spatial/","page":"Spatial discretization","title":"Spatial discretization","text":"The volume center coordinates are determined from the volume boundary boundaries by x_i = frac12 (x_i - frac12 + x_i + frac12) and y_j = frac12 (y_j - frac12 + y_j + frac12). This allows for defining the shifted volumes Omega_i + frac12 j, Omega_i j + frac12, and Omega_i + frac12 j + frac12.","category":"page"},{"location":"equations/spatial/","page":"Spatial discretization","title":"Spatial discretization","text":"We also define the volume widths Delta x_i = x_i + frac12 - x_i - frac12 and volume heights Delta y_j = y_j + frac12 - y_j - frac12. The volume sizes are thus  Omega_i j  = Delta x_i Delta y_j.","category":"page"},{"location":"equations/spatial/","page":"Spatial discretization","title":"Spatial discretization","text":"In each finite volume Omega_i j, there are four different positions in which quantities of interest can be defined:","category":"page"},{"location":"equations/spatial/","page":"Spatial discretization","title":"Spatial discretization","text":"The p-point (x_i y_j),\nThe u-point (x_i + frac12 y_j),\nThe v-point (x_i y_j + frac12),\nThe omega-point (x_i + frac12 y_j + frac12).","category":"page"},{"location":"equations/spatial/","page":"Spatial discretization","title":"Spatial discretization","text":"They form the corners of the top-right quadrant of Omega_i j.","category":"page"},{"location":"equations/spatial/","page":"Spatial discretization","title":"Spatial discretization","text":"The vectors of unknowns will not contain all the half-index values, only those of their own point:","category":"page"},{"location":"equations/spatial/","page":"Spatial discretization","title":"Spatial discretization","text":"The vector u_h will only consist of the components u_i + frac12 j.\nThe vector v_h will only consist of the components v_i j +   frac12.\nThe vector p_h will only consist of the components p_i j.","category":"page"},{"location":"equations/spatial/","page":"Spatial discretization","title":"Spatial discretization","text":"In addtion, we define the full velocity vector V_h = beginpmatrix u_h  v_h endpmatrix.","category":"page"},{"location":"equations/spatial/","page":"Spatial discretization","title":"Spatial discretization","text":"note: Storage convection\nWe use the column-major convention (Julia, MATLAB, Fortran), and not the row-major convention (Python, C). Thus the x-index i will vary for one whole cycle in the vectors u_h, v_h, p_h before the y-index j is incremented.","category":"page"},{"location":"equations/spatial/","page":"Spatial discretization","title":"Spatial discretization","text":"This finite volume configuration is illustrated as follows:","category":"page"},{"location":"equations/spatial/","page":"Spatial discretization","title":"Spatial discretization","text":"(Image: Grid)","category":"page"},{"location":"equations/spatial/#Interpolation","page":"Spatial discretization","title":"Interpolation","text":"","category":"section"},{"location":"equations/spatial/","page":"Spatial discretization","title":"Spatial discretization","text":"When a quantity is required outside of its native point, we will use interpolation. Examples:","category":"page"},{"location":"equations/spatial/","page":"Spatial discretization","title":"Spatial discretization","text":"To compute u at the pressure points:\nbeginsplit\n    u_i j  =\n    fracx_i + frac12 - x_ix_i + frac12 - x_i - frac12\n    u_i - frac12 j\n    + fracx_i - x_i - frac12x_i + frac12 - x_i - frac12\n    u_i + frac12 j \n     = \n    frac12 (u_i - frac12 j + u_i + frac12 j)\nendsplit\nInterpolation weights from volume faces to volume centers are always frac12.\nTo compute v at vorticity points:\nv_i + frac12 j + frac12 =\nfracx_i + 1 - x_i + frac12x_i + 1 - x_i\nv_i j + frac12\n+ fracx_i + frac12 - x_ix_i + 1 - x_i\nv_i + 1 j + frac12\nTo compute p at v-points:\np_i j + frac12 =\nfracy_j + 1 - y_j + frac12y_j + 1 - y_j\np_i j\n+ fracy_j + frac12 - y_jy_j + 1 - y_j\np_i j + 1","category":"page"},{"location":"equations/spatial/","page":"Spatial discretization","title":"Spatial discretization","text":"Note that the grid is allowed to be non-uniform, so the weights of interpolation from volume centers to volume faces may unequal and different from frac12.","category":"page"},{"location":"equations/spatial/#Finite-volume-discretization-of-the-Navier-Stokes-equations","page":"Spatial discretization","title":"Finite volume discretization of the Navier-Stokes equations","text":"","category":"section"},{"location":"equations/spatial/","page":"Spatial discretization","title":"Spatial discretization","text":"We will consider the integral form of the Navier-Stokes equations. This has the advantage that some of the spatial derivatives dissapear, reducing the amount of finite difference approximations we need to perform.","category":"page"},{"location":"equations/spatial/#Mass-equation","page":"Spatial discretization","title":"Mass equation","text":"","category":"section"},{"location":"equations/spatial/","page":"Spatial discretization","title":"Spatial discretization","text":"The mass equation takes the form","category":"page"},{"location":"equations/spatial/","page":"Spatial discretization","title":"Spatial discretization","text":"int_partial mathcalO V cdot n  mathrmd Gamma = 0 quad forall\nmathcalO subset Omega","category":"page"},{"location":"equations/spatial/","page":"Spatial discretization","title":"Spatial discretization","text":"Using the pressure volume mathcalO = Omega_i j, we get","category":"page"},{"location":"equations/spatial/","page":"Spatial discretization","title":"Spatial discretization","text":"int_y_j - frac12^y_j + frac12 u(x_i + frac12 y)  mathrmd y\n- int_y_j - frac12^y_j + frac12 u(x_i - frac12 y)  mathrmd y\n+ int_x_i - frac12^x_i + frac12 v(x y_j + frac12)  mathrmd x\n- int_x_i - frac12^x_i + frac12 v(x y_j - frac12)  mathrmd x\n= 0","category":"page"},{"location":"equations/spatial/","page":"Spatial discretization","title":"Spatial discretization","text":"Assuming that the flow is fully resolved, meaning that Omega_i j is is sufficiently small such that u and v are locally linear, we can perform the local approximation (quadrature)","category":"page"},{"location":"equations/spatial/","page":"Spatial discretization","title":"Spatial discretization","text":"beginsplit\n    int_y_j - frac12^y_j + frac12 u(x_i - frac12 y)  mathrmd y\n     approx Delta y_j u_i - frac12 j \n    int_y_j - frac12^y_j + frac12 u(x_i + frac12 y)  mathrmd y\n     approx Delta y_j u_i + frac12 j \n    int_x_i - frac12^x_i + frac12 v(x y_j - frac12)  mathrmd x\n     approx Delta x_i v_i j - frac12 \n    int_x_i - frac12^x_i + frac12 v(x y_j + frac12)  mathrmd x\n     approx Delta x_i v_i j + frac12\nendsplit","category":"page"},{"location":"equations/spatial/","page":"Spatial discretization","title":"Spatial discretization","text":"This yields the discrete mass equation","category":"page"},{"location":"equations/spatial/","page":"Spatial discretization","title":"Spatial discretization","text":"Delta y_j (u_i + frac12 j - u_i -\nfrac12 j)\n+ \nDelta x_i (v_i j + frac12 - v_i j -\nfrac12)\n= 0","category":"page"},{"location":"equations/spatial/","page":"Spatial discretization","title":"Spatial discretization","text":"which can also be written in the matrix form","category":"page"},{"location":"equations/spatial/","page":"Spatial discretization","title":"Spatial discretization","text":"M V_h = M_x u_h + M_y v_h = 0","category":"page"},{"location":"equations/spatial/","page":"Spatial discretization","title":"Spatial discretization","text":"where M = beginpmatrix M_x  M_y endpmatrix is the discrete divergence operator.","category":"page"},{"location":"equations/spatial/","page":"Spatial discretization","title":"Spatial discretization","text":"note: Approximation error\nFor the mass equation, the only approximation we have performed is quadrature. No interpolation or finite difference error is present.","category":"page"},{"location":"equations/spatial/#Momentum-equations","page":"Spatial discretization","title":"Momentum equations","text":"","category":"section"},{"location":"equations/spatial/","page":"Spatial discretization","title":"Spatial discretization","text":"We will consider the two momentum equations separately. Grouping the convection, pressure gradient, diffusion, and body force terms in each of their own integrals, we get, for all mathcalO subset Omega:","category":"page"},{"location":"equations/spatial/","page":"Spatial discretization","title":"Spatial discretization","text":"beginsplit\n    fracpartial partial t int_mathcalO u  mathrmd Omega\n     =\n    - int_partial mathcalO left( u u n_x + u v n_y right)  mathrmd Gamma\n    - int_partial mathcalO p n_x  mathrmd Gamma\n    + nu int_partial mathcalO left( fracpartial upartial x n_x + fracpartial upartial y n_y right)  mathrmd Gamma\n    + int_mathcalO f_u mathrmd Omega \n    fracpartial partial t int_mathcalO v  mathrmd Omega\n     =\n    - int_partial mathcalO left( v u n_x + v v n_y right)  mathrmd Gamma\n    - int_partial mathcalO p n_y  mathrmd Gamma\n    + nu int_partial mathcalO left( fracpartial vpartial x n_x + fracpartial vpartial y n_y right)  mathrmd Gamma\n    + int_mathcalO f_v mathrmd Omega\nendsplit","category":"page"},{"location":"equations/spatial/","page":"Spatial discretization","title":"Spatial discretization","text":"where n = (n_x n_y).","category":"page"},{"location":"equations/spatial/","page":"Spatial discretization","title":"Spatial discretization","text":"This time, we will not let mathcalO be the reference finite volume Omega_i j (the p-volume), but rather the shifted u- and v-volumes. Setting mathcalO = Omega_i + frac12 j gives","category":"page"},{"location":"equations/spatial/","page":"Spatial discretization","title":"Spatial discretization","text":"beginsplit\n    fracpartial partial t\n    int_y_j - frac12^y_j + frac12\n    int_x_i^x_i + 1\n    u(x y)  mathrmd x mathrmd y\n    =\n       -\n    int_y_j - frac12^y_j + frac12\n    left( (u u)(x_i + 1 y) - (u u)(x_i y) right)\n     mathrmd y \n\n     -\n    int_x_i^x_i + 1\n    left( (u v)(x y_j + frac12) - (u v)(x y_j - frac12)\n    right)\n     mathrmd x \n\n     -\n    int_y_j - frac12^y_j + frac12\n    left( p(x_i + 1 y) - p(x_i y) right)\n     mathrmd y \n\n     + nu\n    int_y_j - frac12^y_j + frac12\n    left( fracpartial upartial x(x_i + 1 y) - fracpartial\n    upartial x(x_i y) right)\n     mathrmd y \n\n     + nu int_x_i^x_i + 1\n    left( fracpartial upartial y(x y_j + frac12) -\n    fracpartial upartial y(x y_j - frac12) right)\n     mathrmd x \n\n     +\n    int_y_j - frac12^y_j + frac12\n    int_x_i^x_i + 1\n    f_u(x y)  mathrmd x mathrmd y \nendsplit","category":"page"},{"location":"equations/spatial/","page":"Spatial discretization","title":"Spatial discretization","text":"This equation is still exact. We now introduce some approximations on Omega_i + frac12 j and its boundaries to remove all unknown continuous quantities.","category":"page"},{"location":"equations/spatial/","page":"Spatial discretization","title":"Spatial discretization","text":"We replace the integrals with a mid-point quadrature rule.\nThe the mid-point values of derivatives are approximated using a central finite difference:\nfracpartial upartial x(x_i y_j) approx fracu_i + frac12 j\n- u_i - frac12 jx_i + frac12 - x_i - frac12\nand similarly for fracpartial upartial x(x_i + 1 y_j). If the grid is non-uniform, we also translate the derivative value to the midpoint:\nfracpartial upartial y(x_i + frac12 y_j + frac12)\napprox fracpartial upartial y left( x_i + frac12 fracy_i + y_i + 12 right)\napprox fracu_i + frac12 j + 1 - u_i + frac12 jy_j + 1 - y_j\nand similarly for fracpartial upartial y(x_i + frac12 y_j - frac12).\nQuantities outside their canonical positions are obtained through interpolation.","category":"page"},{"location":"equations/spatial/","page":"Spatial discretization","title":"Spatial discretization","text":"Finally, the discrete u-momentum equations are given by","category":"page"},{"location":"equations/spatial/","page":"Spatial discretization","title":"Spatial discretization","text":"beginsplit\n    Delta x_i + frac12\n    Delta y_j\n    fracmathrmd mathrmd t u_i + frac12 j =\n     - Delta y_j left( (u u)_i + 1 j - (u u)_i j right) \n     - Delta x_i + frac12 left( (u v)_i + frac12 j +\n    frac12 - (u v)_i + frac12 j - frac12 right) \n     - Delta y_j left( p_i + 1 j - p_i j right) \n     + nu Delta y_j left( \n    fracu_i + frac32 j - u_i + frac12 jDelta x_i + 1\n    - fracu_i + frac12 j - u_i - frac12 jDelta x_i\n    right) \n     + nu Delta x_i + frac12 left( \n    fracu_i + frac12 j + 1 - u_i + frac12 jDelta y_j + frac12\n    - fracu_i + frac12 j - u_i + frac12 j - 1Delta y_j - frac12\n    right) \n     + \n    Delta x_i + frac12\n    Delta y_j\n    f_u left( x_i + frac12 y_j right)\nendsplit","category":"page"},{"location":"equations/spatial/","page":"Spatial discretization","title":"Spatial discretization","text":"A similar derivation over the v-volume Omega_i j + frac12 yields the discrete v-momentum equations","category":"page"},{"location":"equations/spatial/","page":"Spatial discretization","title":"Spatial discretization","text":"beginsplit\n    Delta x_i\n    Delta y_j + frac12\n    fracmathrmd mathrmd t v_i j + frac12 =\n     - Delta y_j + frac12 left( (v u)_i + frac12 j + frac12\n    - (v u)_i - frac12 j + frac12 right) \n     - Delta x_i left( (v v)_i j + 1 - (v v)_i j right) \n     - Delta x_i left( p_i j + 1 - p_i j right) \n     + nu Delta x_i + frac12 left( \n    fracv_i + 1 j + frac12 - v_i j + frac12Delta x_i + frac12\n    - fracv_i j + frac12 - u_i - 1 j + frac12Delta x_i -\n    frac12 right) \n     + nu Delta x_i left( \n    fracv_i j + frac32 - u_i j + frac12Delta y_j + 1\n    - fracv_i j + frac12 - v_i j - frac12Delta y_j\n    right) \n     + \n    Delta x_i\n    Delta y_j + frac12\n    f_v left( x_i y_j + frac12 right)\nendsplit","category":"page"},{"location":"equations/spatial/","page":"Spatial discretization","title":"Spatial discretization","text":"In matrix form, we will denote this as","category":"page"},{"location":"equations/spatial/","page":"Spatial discretization","title":"Spatial discretization","text":"Omega_h fracmathrmd V_hmathrmd t = - C(V_h) + nu D V_h + Omega_h f_h  - G p_h","category":"page"},{"location":"equations/spatial/","page":"Spatial discretization","title":"Spatial discretization","text":"Note the important property G = M^mathsfT.","category":"page"},{"location":"equations/spatial/#Boundary-conditions","page":"Spatial discretization","title":"Boundary conditions","text":"","category":"section"},{"location":"equations/spatial/","page":"Spatial discretization","title":"Spatial discretization","text":"If a domain boundary is not periodic, the boundary values of certain quantities are prescribed. Consider the left boundary defined by i = frac12.","category":"page"},{"location":"equations/spatial/","page":"Spatial discretization","title":"Spatial discretization","text":"For Dirichlet boundary conditions, we prescribe the value\nu_frac12 j = u(x_frac12 y_j)\nFor v, we also prescribe values, but only at the boundary, thus replacing otherwise interpolated v-fluxes:\nv_frac12 j - frac12 = v(x_frac12 y_j - frac12)\nFor a symmetric left boundary, only u_frac12 j is prescribed.\nFor a pressure left boundary, we prescribe p:\np_0 j = p(x_0 y_j)","category":"page"},{"location":"equations/spatial/","page":"Spatial discretization","title":"Spatial discretization","text":"The boundary components are removed from the two vectors V_h and p_h. Instead, these components are prescribed as constants.","category":"page"},{"location":"equations/spatial/","page":"Spatial discretization","title":"Spatial discretization","text":"The discrete mass equation then becomes","category":"page"},{"location":"equations/spatial/","page":"Spatial discretization","title":"Spatial discretization","text":"M V_h = y_M","category":"page"},{"location":"equations/spatial/","page":"Spatial discretization","title":"Spatial discretization","text":"where y_M are the boundary conditions for M.","category":"page"},{"location":"equations/spatial/","page":"Spatial discretization","title":"Spatial discretization","text":"The discrete momentum equations become","category":"page"},{"location":"equations/spatial/","page":"Spatial discretization","title":"Spatial discretization","text":"beginsplit\n    Omega_h fracmathrmd V_hmathrmd t  = -C(V_h) V_h + nu (D V_h +\n    y_D) + f_h - (G p_h + y_G) \n     = F(V_h) - (G p_h + y_G)\nendsplit","category":"page"},{"location":"equations/spatial/","page":"Spatial discretization","title":"Spatial discretization","text":"where y_D is diffusion boundary vector and y_G is the pressure boundary vector.","category":"page"},{"location":"equations/spatial/#Discrete-pressure-Poisson-equation","page":"Spatial discretization","title":"Discrete pressure Poisson equation","text":"","category":"section"},{"location":"equations/spatial/","page":"Spatial discretization","title":"Spatial discretization","text":"Instead of directly discretizing the continuous pressure Poisson equation, we will rededuce it in the discrete setting, thus aiming to preserve the discrete divergence freeness instead of the continuous one. Applying the discrete divergence operator M to the discrete momentum equations yields the discrete pressure Poisson equation","category":"page"},{"location":"equations/spatial/","page":"Spatial discretization","title":"Spatial discretization","text":"- L p_h = - M Omega_h^-1 (F(V_h) - y_G) + fracmathrmd y_Mmathrmd t","category":"page"},{"location":"equations/spatial/","page":"Spatial discretization","title":"Spatial discretization","text":"where L = M Omega_h^-1 G is a discrete Laplace operator. It is positive symmetric since G = M^mathsfT.","category":"page"},{"location":"equations/spatial/","page":"Spatial discretization","title":"Spatial discretization","text":"note: Pressure projection\nThe pressure vector p_h can be seen as a Lagrange multiplier enforcing the constraint of divergence freeness. It is possible to write a the momentum equations without the pressure by explicitly solving the discrete Poisson equation:p_h = L^-1 M Omega_h^-1 (F(V_h) - y_G) - L^-1 fracmathrmd y_Mmathrmd tThe momentum equations then becomeOmega_h fracmathrmd V_hmathrmd t = (I - G L^-1 M Omega_h^-1)\n(F(V_h) - y_G) + G L^-1 fracmathrmd y_Mmathrmd tThe matrix (I - G L^-1 M Omega^-1) is a projector onto the space of discretely divergence free velocities. However, using this formulation would require an efficient way to perform the projection without assembling the operator matrix L^-1, which would be very costly.","category":"page"},{"location":"api/tableaux/","page":"Runge-Kutta methods","title":"Runge-Kutta methods","text":"CurrentModule = IncompressibleNavierStokes","category":"page"},{"location":"api/tableaux/#API-Reference-–-Runge-Kutta-methods","page":"Runge-Kutta methods","title":"API Reference – Runge-Kutta methods","text":"","category":"section"},{"location":"api/tableaux/#Explicit-Methods","page":"Runge-Kutta methods","title":"Explicit Methods","text":"","category":"section"},{"location":"api/tableaux/","page":"Runge-Kutta methods","title":"Runge-Kutta methods","text":"FE11\nSSP22\nSSP42\nSSP33\nSSP43\nSSP104\nrSSPs2\nrSSPs3\nWray3\nRK56\nDOPRI6","category":"page"},{"location":"api/tableaux/#IncompressibleNavierStokes.FE11","page":"Runge-Kutta methods","title":"IncompressibleNavierStokes.FE11","text":"FE11(; kwargs...)\n\nFE11.\n\n\n\n\n\n","category":"function"},{"location":"api/tableaux/#IncompressibleNavierStokes.SSP22","page":"Runge-Kutta methods","title":"IncompressibleNavierStokes.SSP22","text":"SSP22(; kwargs...)\n\nSSP22.\n\n\n\n\n\n","category":"function"},{"location":"api/tableaux/#IncompressibleNavierStokes.SSP42","page":"Runge-Kutta methods","title":"IncompressibleNavierStokes.SSP42","text":"SSP42(; kwargs...)\n\nSSP42.\n\n\n\n\n\n","category":"function"},{"location":"api/tableaux/#IncompressibleNavierStokes.SSP33","page":"Runge-Kutta methods","title":"IncompressibleNavierStokes.SSP33","text":"SSP33(; kwargs...)\n\nSSP33.\n\n\n\n\n\n","category":"function"},{"location":"api/tableaux/#IncompressibleNavierStokes.SSP43","page":"Runge-Kutta methods","title":"IncompressibleNavierStokes.SSP43","text":"SSP43(; kwargs...)\n\nSSP43.\n\n\n\n\n\n","category":"function"},{"location":"api/tableaux/#IncompressibleNavierStokes.SSP104","page":"Runge-Kutta methods","title":"IncompressibleNavierStokes.SSP104","text":"SSP104(; kwargs...)\n\nSSP104.\n\n\n\n\n\n","category":"function"},{"location":"api/tableaux/#IncompressibleNavierStokes.rSSPs2","page":"Runge-Kutta methods","title":"IncompressibleNavierStokes.rSSPs2","text":"rSSPs2(s = 2; kwargs...)\n\nRational (optimal, low-storage) s-stage 2nd order SSP.\n\n\n\n\n\n","category":"function"},{"location":"api/tableaux/#IncompressibleNavierStokes.rSSPs3","page":"Runge-Kutta methods","title":"IncompressibleNavierStokes.rSSPs3","text":"rSSPs3(s = 4; kwargs...)\n\nRational (optimal, low-storage) s^2-stage 3rd order SSP.\n\n\n\n\n\n","category":"function"},{"location":"api/tableaux/#IncompressibleNavierStokes.Wray3","page":"Runge-Kutta methods","title":"IncompressibleNavierStokes.Wray3","text":"Wray3(; kwargs...)\n\nWray's RK3.\n\n\n\n\n\n","category":"function"},{"location":"api/tableaux/#IncompressibleNavierStokes.RK56","page":"Runge-Kutta methods","title":"IncompressibleNavierStokes.RK56","text":"RK56(; kwargs...)\n\nRK56.\n\n\n\n\n\n","category":"function"},{"location":"api/tableaux/#IncompressibleNavierStokes.DOPRI6","page":"Runge-Kutta methods","title":"IncompressibleNavierStokes.DOPRI6","text":"DOPRI6(; kwargs...)\n\nDormand-Price pair.\n\n\n\n\n\n","category":"function"},{"location":"api/tableaux/#Implicit-Methods","page":"Runge-Kutta methods","title":"Implicit Methods","text":"","category":"section"},{"location":"api/tableaux/","page":"Runge-Kutta methods","title":"Runge-Kutta methods","text":"BE11\nSDIRK34\nISSPm2\nISSPs3","category":"page"},{"location":"api/tableaux/#IncompressibleNavierStokes.BE11","page":"Runge-Kutta methods","title":"IncompressibleNavierStokes.BE11","text":"BE11(; kwargs...)\n\nBackward Euler.\n\n\n\n\n\n","category":"function"},{"location":"api/tableaux/#IncompressibleNavierStokes.SDIRK34","page":"Runge-Kutta methods","title":"IncompressibleNavierStokes.SDIRK34","text":"SDIRK34(; kwargs...)\n\n3-stage, 4th order singly diagonally implicit (SSP).\n\n\n\n\n\n","category":"function"},{"location":"api/tableaux/#IncompressibleNavierStokes.ISSPm2","page":"Runge-Kutta methods","title":"IncompressibleNavierStokes.ISSPm2","text":"ISSPm2(s = 1; kwargs...)\n\nOptimal DIRK SSP schemes of order 2.\n\n\n\n\n\n","category":"function"},{"location":"api/tableaux/#IncompressibleNavierStokes.ISSPs3","page":"Runge-Kutta methods","title":"IncompressibleNavierStokes.ISSPs3","text":"ISSPs3(s = 2; kwargs...)\n\nOptimal DIRK SSP schemes of order 3.\n\n\n\n\n\n","category":"function"},{"location":"api/tableaux/#Half-explicit-methods","page":"Runge-Kutta methods","title":"Half explicit methods","text":"","category":"section"},{"location":"api/tableaux/","page":"Runge-Kutta methods","title":"Runge-Kutta methods","text":"HEM3\nHEM3BS\nHEM5","category":"page"},{"location":"api/tableaux/#IncompressibleNavierStokes.HEM3","page":"Runge-Kutta methods","title":"IncompressibleNavierStokes.HEM3","text":"HEM3(; kwargs...)\n\nBrasey and Hairer.\n\n\n\n\n\n","category":"function"},{"location":"api/tableaux/#IncompressibleNavierStokes.HEM3BS","page":"Runge-Kutta methods","title":"IncompressibleNavierStokes.HEM3BS","text":"HEM3BS(; kwargs...)\n\nHEM3BS.\n\n\n\n\n\n","category":"function"},{"location":"api/tableaux/#IncompressibleNavierStokes.HEM5","page":"Runge-Kutta methods","title":"IncompressibleNavierStokes.HEM5","text":"HEM5(; kwargs...)\n\nBrasey and Hairer, 5 stage, 4th order.\n\n\n\n\n\n","category":"function"},{"location":"api/tableaux/#Classical-Methods","page":"Runge-Kutta methods","title":"Classical Methods","text":"","category":"section"},{"location":"api/tableaux/","page":"Runge-Kutta methods","title":"Runge-Kutta methods","text":"GL1\nGL2\nGL3\nRIA1\nRIA2\nRIA3\nRIIA1\nRIIA2\nRIIA3\nLIIIA2\nLIIIA3","category":"page"},{"location":"api/tableaux/#IncompressibleNavierStokes.GL1","page":"Runge-Kutta methods","title":"IncompressibleNavierStokes.GL1","text":"GL1(; kwargs...)\n\nGL1.\n\n\n\n\n\n","category":"function"},{"location":"api/tableaux/#IncompressibleNavierStokes.GL2","page":"Runge-Kutta methods","title":"IncompressibleNavierStokes.GL2","text":"GL2(; kwargs...)\n\nGL2.\n\n\n\n\n\n","category":"function"},{"location":"api/tableaux/#IncompressibleNavierStokes.GL3","page":"Runge-Kutta methods","title":"IncompressibleNavierStokes.GL3","text":"GL3(; kwargs...)\n\nGL3.\n\n\n\n\n\n","category":"function"},{"location":"api/tableaux/#IncompressibleNavierStokes.RIA1","page":"Runge-Kutta methods","title":"IncompressibleNavierStokes.RIA1","text":"RIA1(; kwargs...)\n\nThis is implicit Euler.\n\n\n\n\n\n","category":"function"},{"location":"api/tableaux/#IncompressibleNavierStokes.RIA2","page":"Runge-Kutta methods","title":"IncompressibleNavierStokes.RIA2","text":"RIA2(; kwargs...)\n\nRIA2.\n\n\n\n\n\n","category":"function"},{"location":"api/tableaux/#IncompressibleNavierStokes.RIA3","page":"Runge-Kutta methods","title":"IncompressibleNavierStokes.RIA3","text":"RIA3(; kwargs...)\n\nRIA3.\n\n\n\n\n\n","category":"function"},{"location":"api/tableaux/#IncompressibleNavierStokes.RIIA1","page":"Runge-Kutta methods","title":"IncompressibleNavierStokes.RIIA1","text":"RIIA1(; kwargs...)\n\nRIIA1.\n\n\n\n\n\n","category":"function"},{"location":"api/tableaux/#IncompressibleNavierStokes.RIIA2","page":"Runge-Kutta methods","title":"IncompressibleNavierStokes.RIIA2","text":"RIIA2(; kwargs...)\n\nRIIA2.\n\n\n\n\n\n","category":"function"},{"location":"api/tableaux/#IncompressibleNavierStokes.RIIA3","page":"Runge-Kutta methods","title":"IncompressibleNavierStokes.RIIA3","text":"RIIA3(; kwargs...)\n\nRIIA3.\n\n\n\n\n\n","category":"function"},{"location":"api/tableaux/#IncompressibleNavierStokes.LIIIA2","page":"Runge-Kutta methods","title":"IncompressibleNavierStokes.LIIIA2","text":"LIIIA2(; kwargs...)\n\nLIIIA2.\n\n\n\n\n\n","category":"function"},{"location":"api/tableaux/#IncompressibleNavierStokes.LIIIA3","page":"Runge-Kutta methods","title":"IncompressibleNavierStokes.LIIIA3","text":"LIIIA3(; kwargs...)\n\nLIIIA3.\n\n\n\n\n\n","category":"function"},{"location":"api/tableaux/#Chebyshev-methods","page":"Runge-Kutta methods","title":"Chebyshev methods","text":"","category":"section"},{"location":"api/tableaux/","page":"Runge-Kutta methods","title":"Runge-Kutta methods","text":"CHDIRK3\nCHCONS3\nCHC3\nCHC5","category":"page"},{"location":"api/tableaux/#IncompressibleNavierStokes.CHDIRK3","page":"Runge-Kutta methods","title":"IncompressibleNavierStokes.CHDIRK3","text":"CHDIRK3(; kwargs...)\n\nChebyshev based DIRK (not algebraically stable).\n\n\n\n\n\n","category":"function"},{"location":"api/tableaux/#IncompressibleNavierStokes.CHCONS3","page":"Runge-Kutta methods","title":"IncompressibleNavierStokes.CHCONS3","text":"CHCONS3(; kwargs...)\n\nCHCONS3.\n\n\n\n\n\n","category":"function"},{"location":"api/tableaux/#IncompressibleNavierStokes.CHC3","page":"Runge-Kutta methods","title":"IncompressibleNavierStokes.CHC3","text":"CHC3(; kwargs...)\n\nChebyshev quadrature and C(3) satisfied. Note this equals Lobatto IIIA.\n\n\n\n\n\n","category":"function"},{"location":"api/tableaux/#IncompressibleNavierStokes.CHC5","page":"Runge-Kutta methods","title":"IncompressibleNavierStokes.CHC5","text":"CHC5(; kwargs...)\n\nCHC5.\n\n\n\n\n\n","category":"function"},{"location":"api/tableaux/#Miscellaneous-Methods","page":"Runge-Kutta methods","title":"Miscellaneous Methods","text":"","category":"section"},{"location":"api/tableaux/","page":"Runge-Kutta methods","title":"Runge-Kutta methods","text":"Mid22\nMTE22\nCN22\nHeun33\nRK33C2\nRK33P2\nRK44\nRK44C2\nRK44C23\nRK44P2","category":"page"},{"location":"api/tableaux/#IncompressibleNavierStokes.Mid22","page":"Runge-Kutta methods","title":"IncompressibleNavierStokes.Mid22","text":"Mid22(; kwargs...)\n\nMidpoint 22 method.\n\n\n\n\n\n","category":"function"},{"location":"api/tableaux/#IncompressibleNavierStokes.MTE22","page":"Runge-Kutta methods","title":"IncompressibleNavierStokes.MTE22","text":"MTE22(; kwargs...)\n\nMinimal truncation error 22 method (Heun).\n\n\n\n\n\n","category":"function"},{"location":"api/tableaux/#IncompressibleNavierStokes.CN22","page":"Runge-Kutta methods","title":"IncompressibleNavierStokes.CN22","text":"CN22(; kwargs...)\n\nCrank-Nicholson.\n\n\n\n\n\n","category":"function"},{"location":"api/tableaux/#IncompressibleNavierStokes.Heun33","page":"Runge-Kutta methods","title":"IncompressibleNavierStokes.Heun33","text":"Heun33(; kwargs...)\n\nHeun33.\n\n\n\n\n\n","category":"function"},{"location":"api/tableaux/#IncompressibleNavierStokes.RK33C2","page":"Runge-Kutta methods","title":"IncompressibleNavierStokes.RK33C2","text":"RK33C2(; kwargs...)\n\nRK3 satisfying C(2) for i=3.\n\n\n\n\n\n","category":"function"},{"location":"api/tableaux/#IncompressibleNavierStokes.RK33P2","page":"Runge-Kutta methods","title":"IncompressibleNavierStokes.RK33P2","text":"RK33P2(; kwargs...)\n\nRK3 satisfying the second order condition for the pressure.\n\n\n\n\n\n","category":"function"},{"location":"api/tableaux/#IncompressibleNavierStokes.RK44","page":"Runge-Kutta methods","title":"IncompressibleNavierStokes.RK44","text":"RK44(; kwargs...)\n\nClassical fourth order.\n\n\n\n\n\n","category":"function"},{"location":"api/tableaux/#IncompressibleNavierStokes.RK44C2","page":"Runge-Kutta methods","title":"IncompressibleNavierStokes.RK44C2","text":"RK44C2(; kwargs...)\n\nRK4 satisfying C(2) for i=3.\n\n\n\n\n\n","category":"function"},{"location":"api/tableaux/#IncompressibleNavierStokes.RK44C23","page":"Runge-Kutta methods","title":"IncompressibleNavierStokes.RK44C23","text":"RK44C23(; kwargs...)\n\nRK4 satisfying C(2) for i=3 and c2=c3.\n\n\n\n\n\n","category":"function"},{"location":"api/tableaux/#IncompressibleNavierStokes.RK44P2","page":"Runge-Kutta methods","title":"IncompressibleNavierStokes.RK44P2","text":"RK44P2(; kwargs...)\n\nRK4 satisfying the second order condition for the pressure (but not third order).\n\n\n\n\n\n","category":"function"},{"location":"api/tableaux/#DSRK-Methods","page":"Runge-Kutta methods","title":"DSRK Methods","text":"","category":"section"},{"location":"api/tableaux/","page":"Runge-Kutta methods","title":"Runge-Kutta methods","text":"DSso2\nDSRK2\nDSRK3","category":"page"},{"location":"api/tableaux/#IncompressibleNavierStokes.DSso2","page":"Runge-Kutta methods","title":"IncompressibleNavierStokes.DSso2","text":"DSso2(; kwargs...)\n\nCBM's DSRKso2.\n\n\n\n\n\n","category":"function"},{"location":"api/tableaux/#IncompressibleNavierStokes.DSRK2","page":"Runge-Kutta methods","title":"IncompressibleNavierStokes.DSRK2","text":"DSRK2(; kwargs...)\n\nCBM's DSRK2.\n\n\n\n\n\n","category":"function"},{"location":"api/tableaux/#IncompressibleNavierStokes.DSRK3","page":"Runge-Kutta methods","title":"IncompressibleNavierStokes.DSRK3","text":"DSRK3(; kwargs...)\n\nZennaro's DSRK3.\n\n\n\n\n\n","category":"function"},{"location":"api/tableaux/#\"Non-SSP\"-Methods-of-Wong-and-Spiteri","page":"Runge-Kutta methods","title":"\"Non-SSP\" Methods of Wong & Spiteri","text":"","category":"section"},{"location":"api/tableaux/","page":"Runge-Kutta methods","title":"Runge-Kutta methods","text":"NSSP21\nNSSP32\nNSSP33\nNSSP53","category":"page"},{"location":"api/tableaux/#IncompressibleNavierStokes.NSSP21","page":"Runge-Kutta methods","title":"IncompressibleNavierStokes.NSSP21","text":"NSSP21(; kwargs...)\n\nNSSP21.\n\n\n\n\n\n","category":"function"},{"location":"api/tableaux/#IncompressibleNavierStokes.NSSP32","page":"Runge-Kutta methods","title":"IncompressibleNavierStokes.NSSP32","text":"NSSP32(; kwargs...)\n\nNSSP32.\n\n\n\n\n\n","category":"function"},{"location":"api/tableaux/#IncompressibleNavierStokes.NSSP33","page":"Runge-Kutta methods","title":"IncompressibleNavierStokes.NSSP33","text":"NSSP33(; kwargs...)\n\nNSSP33.\n\n\n\n\n\n","category":"function"},{"location":"api/tableaux/#IncompressibleNavierStokes.NSSP53","page":"Runge-Kutta methods","title":"IncompressibleNavierStokes.NSSP53","text":"NSSP53(; kwargs...)\n\nNSSP53.\n\n\n\n\n\n","category":"function"},{"location":"features/bc/#Boundary-conditions","page":"Boundary conditions","title":"Boundary conditions","text":"","category":"section"},{"location":"features/bc/","page":"Boundary conditions","title":"Boundary conditions","text":"Various boundary conditions are supported. They are indicated by the symbols","category":"page"},{"location":"features/bc/","page":"Boundary conditions","title":"Boundary conditions","text":":periodic\n:dirichlet\n:symmetric\n:pressure","category":"page"},{"location":"equations/ns/#Incompressible-Navier-Stokes-equations","page":"Incompressible Navier-Stokes equations","title":"Incompressible Navier-Stokes equations","text":"","category":"section"},{"location":"equations/ns/","page":"Incompressible Navier-Stokes equations","title":"Incompressible Navier-Stokes equations","text":"The incompressible Navier-Stokes equations are comprised of a mass equation and two or three momentum equations. In conservative form, they are given by","category":"page"},{"location":"equations/ns/","page":"Incompressible Navier-Stokes equations","title":"Incompressible Navier-Stokes equations","text":"beginalign*\nnabla cdot V  = 0 \nfracmathrmd Vmathrmd t + nabla cdot (V V^mathsfT)  = -nabla p +\nnu nabla^2 V + f\nendalign*","category":"page"},{"location":"equations/ns/","page":"Incompressible Navier-Stokes equations","title":"Incompressible Navier-Stokes equations","text":"where V = (u v) or V = (u v w) is the velocity field, p is the pressure, nu is the kinematic viscosity, and f = (f_u f_v) or f = (f_u f_v f_w) is the body force per unit of volume. In 2D, the equations become","category":"page"},{"location":"equations/ns/","page":"Incompressible Navier-Stokes equations","title":"Incompressible Navier-Stokes equations","text":"beginsplit\n    fracpartial upartial x + fracpartial vpartial y  = 0 \n    fracpartial upartial t + fracpartial (u u)partial x +\n    fracpartial (v u)partial y  = - fracpartial ppartial x +\n    nu left( fracpartial^2 upartial x^2 + fracpartial^2\n    upartial y^2 right) + f_u \n    fracpartial vpartial t + fracpartial (u v)partial x +\n    fracpartial (v v)partial y  = - fracpartial ppartial y +\n    nu left( fracpartial^2 vpartial x^2 + fracpartial^2\n    vpartial y^2 right) + f_v\nendsplit","category":"page"},{"location":"equations/ns/","page":"Incompressible Navier-Stokes equations","title":"Incompressible Navier-Stokes equations","text":"In 3D, the equations become","category":"page"},{"location":"equations/ns/","page":"Incompressible Navier-Stokes equations","title":"Incompressible Navier-Stokes equations","text":"beginsplit\n    fracpartial upartial x + fracpartial vpartial y +\n    fracpartial wpartial z  = 0 \n    fracpartial upartial t + fracpartial (u u)partial x +\n    fracpartial (v u)partial y + fracpartial (w u)partial z  = -\n    fracpartial ppartial x + nu left( fracpartial^2 upartial\n    x^2 + fracpartial^2 upartial y^2 + fracpartial^2 upartial\n    z^2 right) + f_u \n    fracpartial vpartial t + fracpartial (u v)partial x +\n    fracpartial (v v)partial y + fracpartial (w v)partial z  = -\n    fracpartial ppartial y + nu left( fracpartial^2 vpartial\n    x^2 + fracpartial^2 vpartial y^2 + fracpartial^2 vpartial\n    z^2  right) + f_v \n    fracpartial wpartial t + fracpartial (u w)partial x +\n    fracpartial (v w)partial y + fracpartial (w w)partial z  = -\n    fracpartial ppartial z + nu left( fracpartial^2 wpartial\n    x^2 + fracpartial^2 wpartial y^2 + fracpartial^2 wpartial\n    z^2  right) + f_w \nendsplit","category":"page"},{"location":"equations/ns/#Integral-form","page":"Incompressible Navier-Stokes equations","title":"Integral form","text":"","category":"section"},{"location":"equations/ns/","page":"Incompressible Navier-Stokes equations","title":"Incompressible Navier-Stokes equations","text":"When discretizing the Navier-Stokes equations it can be useful to integrate the equations over an arbitrary control volume mathcalO. Its boundary will be denoted partial mathcalO, with normal n and surface element mathrmd Gamma.","category":"page"},{"location":"equations/ns/","page":"Incompressible Navier-Stokes equations","title":"Incompressible Navier-Stokes equations","text":"The mass equation in integral form is given by","category":"page"},{"location":"equations/ns/","page":"Incompressible Navier-Stokes equations","title":"Incompressible Navier-Stokes equations","text":"int_partial mathcalO V cdot n  mathrmd Gamma = 0","category":"page"},{"location":"equations/ns/","page":"Incompressible Navier-Stokes equations","title":"Incompressible Navier-Stokes equations","text":"where we have used the divergence theorem to convert the volume integral to a surface integral. Similarly, the momentum equations take the form","category":"page"},{"location":"equations/ns/","page":"Incompressible Navier-Stokes equations","title":"Incompressible Navier-Stokes equations","text":"fracpartial partial t int_mathcalO V  mathrmd Omega\n= int_partial mathcalO left( - V V^mathsfT - P + nu S right) cdot n \nmathrmd Gamma + int_mathcalO f mathrmd Omega","category":"page"},{"location":"equations/ns/","page":"Incompressible Navier-Stokes equations","title":"Incompressible Navier-Stokes equations","text":"where P = p mathrmI = operatornamediag(p p) is the hydrostatic stress tensor and S = nabla V + (nabla V)^mathsfT is the strain-rate tensor. Here we have once again used the divergence theorem.","category":"page"},{"location":"equations/ns/","page":"Incompressible Navier-Stokes equations","title":"Incompressible Navier-Stokes equations","text":"note: Strain-rate tensor\nThe second term in the strain rate tensor is optional, asint_partial mathcalO (nabla V)^mathsfT cdot n  mathrmd Gamma = 0due to the divergence freeness of V (mass equation).","category":"page"},{"location":"equations/ns/#Boundary-conditions","page":"Incompressible Navier-Stokes equations","title":"Boundary conditions","text":"","category":"section"},{"location":"equations/ns/","page":"Incompressible Navier-Stokes equations","title":"Incompressible Navier-Stokes equations","text":"Because we will use a Cartesian grid for discretization, the fields V, p, and f are defined over the rectangular or prismatic domain Omega = x_1 x_2 times y_1 y_2 or Omega = x_1 x_2 times y_1 y_2 times z_1 z_2. Along each of the two or three dimensions, we allow for the following boundary conditions (here illustrated on the first boundary of the first dimension)","category":"page"},{"location":"equations/ns/","page":"Incompressible Navier-Stokes equations","title":"Incompressible Navier-Stokes equations","text":"Periodic: V(x = x_1) = V(x = x_2) and p(x = x_1) = p(x = x_2)\nDirichlet: V(x = x_1) = V_1\nPressure: p(x = x_1) = p_1\nSymmetric (no movement through boundary x = x_1, but free movement along it): u(x = x_1) = 0","category":"page"},{"location":"equations/ns/#Pressure-equation","page":"Incompressible Navier-Stokes equations","title":"Pressure equation","text":"","category":"section"},{"location":"equations/ns/","page":"Incompressible Navier-Stokes equations","title":"Incompressible Navier-Stokes equations","text":"Taking the divergence of the two or tree momemtum equations yields a Poisson equation for the pressure:","category":"page"},{"location":"equations/ns/","page":"Incompressible Navier-Stokes equations","title":"Incompressible Navier-Stokes equations","text":"- nabla^2 p = nabla cdot left( nabla cdot (V V^mathsfT) right) -\nnabla cdot f","category":"page"},{"location":"equations/ns/","page":"Incompressible Navier-Stokes equations","title":"Incompressible Navier-Stokes equations","text":"In 2D, this equation becomes","category":"page"},{"location":"equations/ns/","page":"Incompressible Navier-Stokes equations","title":"Incompressible Navier-Stokes equations","text":"- left(fracpartial^2partial x^2 + fracpartial^2partial\ny^2right) p = fracpartial^2 (u u)partial x^2 + 2 fracpartial^2 (u\nv)partial x partial y + fracpartial^2 (v v)partial y^2 - left( fracpartial f_upartial x + fracpartial f_vpartial y right)","category":"page"},{"location":"equations/ns/","page":"Incompressible Navier-Stokes equations","title":"Incompressible Navier-Stokes equations","text":"In 3D, this equation becomes","category":"page"},{"location":"equations/ns/","page":"Incompressible Navier-Stokes equations","title":"Incompressible Navier-Stokes equations","text":"beginsplit\n    - left( fracpartial^2partial x^2 + fracpartial^2partial\n    y^2 + fracpartial^2 partial z^2 right) p\n     = fracpartial^2 (u u)partial x^2\n    + 2 fracpartial^2 (u v)partial x partial y\n    + 2 fracpartial^2 (u w)partial x partial z \n     + 2 fracpartial^2 (v u)partial y partial x\n    +   fracpartial^2 (v v)partial y^2\n    + 2 fracpartial^2 (v w)partial y partial z \n     + 2 fracpartial^2 (v u)partial z partial x\n    + 2 fracpartial^2 (w v)partial z partial y\n    +   fracpartial^2 (w w)partial z^2 \n     - left( fracpartial f_upartial x + fracpartial f_vpartial\n    y + fracpartial f_wpartial z right)\nendsplit","category":"page"},{"location":"equations/ns/","page":"Incompressible Navier-Stokes equations","title":"Incompressible Navier-Stokes equations","text":"Note the absence of time derivatives in the pressure equation. While the velocity field evolves in time, the pressure only changes such that the velocity stays divergence free.","category":"page"},{"location":"equations/ns/","page":"Incompressible Navier-Stokes equations","title":"Incompressible Navier-Stokes equations","text":"If there are no pressure boundary conditions, the pressure is only unique up to a constant. We set this constant to 1.","category":"page"},{"location":"equations/ns/#Other-quantities-of-interest","page":"Incompressible Navier-Stokes equations","title":"Other quantities of interest","text":"","category":"section"},{"location":"equations/ns/#Vorticity","page":"Incompressible Navier-Stokes equations","title":"Vorticity","text":"","category":"section"},{"location":"equations/ns/","page":"Incompressible Navier-Stokes equations","title":"Incompressible Navier-Stokes equations","text":"The vorticity is defined as omega = nabla times V.","category":"page"},{"location":"equations/ns/","page":"Incompressible Navier-Stokes equations","title":"Incompressible Navier-Stokes equations","text":"In 2D, it is a scalar field given by","category":"page"},{"location":"equations/ns/","page":"Incompressible Navier-Stokes equations","title":"Incompressible Navier-Stokes equations","text":"omega = -fracpartial upartial y + fracpartial vpartial x","category":"page"},{"location":"equations/ns/","page":"Incompressible Navier-Stokes equations","title":"Incompressible Navier-Stokes equations","text":"In 3D, it is a vector field given by","category":"page"},{"location":"equations/ns/","page":"Incompressible Navier-Stokes equations","title":"Incompressible Navier-Stokes equations","text":"omega = beginpmatrix\n    - fracpartial vpartial z + fracpartial wpartial y \n    phantom+ fracpartial upartial z - fracpartial wpartial x \n    - fracpartial upartial z + fracpartial wpartial x\nendpmatrix","category":"page"},{"location":"equations/ns/","page":"Incompressible Navier-Stokes equations","title":"Incompressible Navier-Stokes equations","text":"Note that the 2D vorticity is equal to the z-component of the 3D vorticity.","category":"page"},{"location":"equations/ns/#Stream-function","page":"Incompressible Navier-Stokes equations","title":"Stream function","text":"","category":"section"},{"location":"equations/ns/","page":"Incompressible Navier-Stokes equations","title":"Incompressible Navier-Stokes equations","text":"In 2D, the stream function psi is a scalar field defined such that","category":"page"},{"location":"equations/ns/","page":"Incompressible Navier-Stokes equations","title":"Incompressible Navier-Stokes equations","text":"u = fracpartial psipartial y quad v = fracpartial psipartial x","category":"page"},{"location":"equations/ns/","page":"Incompressible Navier-Stokes equations","title":"Incompressible Navier-Stokes equations","text":"In 3D, the stream function psi is a vector field defined such that","category":"page"},{"location":"equations/ns/","page":"Incompressible Navier-Stokes equations","title":"Incompressible Navier-Stokes equations","text":"V = nabla times psi","category":"page"},{"location":"equations/ns/","page":"Incompressible Navier-Stokes equations","title":"Incompressible Navier-Stokes equations","text":"It is related to the 3D vorticity as","category":"page"},{"location":"equations/ns/","page":"Incompressible Navier-Stokes equations","title":"Incompressible Navier-Stokes equations","text":"nabla^2 psi = nabla times omega","category":"page"},{"location":"equations/ns/#Kinetic-energy","page":"Incompressible Navier-Stokes equations","title":"Kinetic energy","text":"","category":"section"},{"location":"equations/ns/","page":"Incompressible Navier-Stokes equations","title":"Incompressible Navier-Stokes equations","text":"The kinetic energy is defined by e = frac12  V ^2.","category":"page"},{"location":"equations/ns/#Reynolds-number","page":"Incompressible Navier-Stokes equations","title":"Reynolds number","text":"","category":"section"},{"location":"equations/ns/","page":"Incompressible Navier-Stokes equations","title":"Incompressible Navier-Stokes equations","text":"The Reynolds number is the inverse of the viscosity: Re = frac1nu.","category":"page"},{"location":"features/steppers/#Time-steppers","page":"Time steppers","title":"Time steppers","text":"","category":"section"},{"location":"features/steppers/","page":"Time steppers","title":"Time steppers","text":"IncompressibleNavierStokes provides a collection of explicit and implicit Runge-Kutta methods, in addition to Adams-Bashforth Crank-Nicolson and one-leg beta method time steppers.","category":"page"},{"location":"features/steppers/","page":"Time steppers","title":"Time steppers","text":"The code is currently not adapted to time steppers from DifferentialEquations.jl, but they may be integrated in the future.","category":"page"},{"location":"features/pressure/#Pressure-solvers","page":"Pressure solvers","title":"Pressure solvers","text":"","category":"section"},{"location":"features/pressure/","page":"Pressure solvers","title":"Pressure solvers","text":"The discrete pressure Poisson equation","category":"page"},{"location":"features/pressure/","page":"Pressure solvers","title":"Pressure solvers","text":"A p_h = g","category":"page"},{"location":"features/pressure/","page":"Pressure solvers","title":"Pressure solvers","text":"enforces divergence freeness. There are three options for solving this system:","category":"page"},{"location":"features/pressure/","page":"Pressure solvers","title":"Pressure solvers","text":"DirectPressureSolver factorizes the Laplace matrix A such that the system can be solved for different right hand sides. This currently only works for double precision on the CPU.\nCGPressureSolver uses conjugate gradients to solve the system for different f.\nSpectralPressureSolver solves the system in Fourier space, but only in the case of a uniform grid with periodic boundary conditions.","category":"page"},{"location":"getting_started/#Getting-Started","page":"Getting Started","title":"Getting Started","text":"","category":"section"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"To install IncompressibleNavierStokes, open up a Julia-REPL, type ] to get into Pkg-mode, and type:","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"add IncompressibleNavierStokes","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"which will install the package and all dependencies to your local environment. Note that IncompressibleNavierStokes requires Julia version 1.7 or above.","category":"page"},{"location":"generated/Actuator2D/","page":"Actuator (2D)","title":"Actuator (2D)","text":"EditURL = \"../../../examples/Actuator2D.jl\"","category":"page"},{"location":"generated/Actuator2D/#Unsteady-actuator-case-2D","page":"Actuator (2D)","title":"Unsteady actuator case - 2D","text":"","category":"section"},{"location":"generated/Actuator2D/","page":"Actuator (2D)","title":"Actuator (2D)","text":"In this example, an unsteady inlet velocity profile at encounters a wind turbine blade in a wall-less domain. The blade is modeled as a uniform body force on a thin rectangle.","category":"page"},{"location":"generated/Actuator2D/","page":"Actuator (2D)","title":"Actuator (2D)","text":"We start by loading packages. A Makie plotting backend is needed for plotting. GLMakie creates an interactive window (useful for real-time plotting), but does not work when building this example on GitHub. CairoMakie makes high-quality static vector-graphics plots.","category":"page"},{"location":"generated/Actuator2D/","page":"Actuator (2D)","title":"Actuator (2D)","text":"using CairoMakie\nusing IncompressibleNavierStokes","category":"page"},{"location":"generated/Actuator2D/","page":"Actuator (2D)","title":"Actuator (2D)","text":"Case name for saving results","category":"page"},{"location":"generated/Actuator2D/","page":"Actuator (2D)","title":"Actuator (2D)","text":"name = \"Actuator2D\"","category":"page"},{"location":"generated/Actuator2D/","page":"Actuator (2D)","title":"Actuator (2D)","text":"Viscosity model","category":"page"},{"location":"generated/Actuator2D/","page":"Actuator (2D)","title":"Actuator (2D)","text":"viscosity_model = LaminarModel(; Re = 100.0)","category":"page"},{"location":"generated/Actuator2D/","page":"Actuator (2D)","title":"Actuator (2D)","text":"Boundary conditions: Unsteady BC requires time derivatives","category":"page"},{"location":"generated/Actuator2D/","page":"Actuator (2D)","title":"Actuator (2D)","text":"u_bc(x, y, t) = x ≈ 0.0 ? cos(π / 6 * sin(π / 6 * t)) : 0.0\nv_bc(x, y, t) = x ≈ 0.0 ? sin(π / 6 * sin(π / 6 * t)) : 0.0\ndudt_bc(x, y, t) = x ≈ 0.0 ? -(π / 6)^2 * cos(π / 6 * t) * sin(π / 6 * sin(π / 6 * t)) : 0.0\ndvdt_bc(x, y, t) = x ≈ 0.0 ? (π / 6)^2 * cos(π / 6 * t) * cos(π / 6 * sin(π / 6 * t)) : 0.0\nbc_type = (;\n    u = (; x = (:dirichlet, :pressure), y = (:symmetric, :symmetric)),\n    v = (; x = (:dirichlet, :symmetric), y = (:pressure, :pressure)),\n)","category":"page"},{"location":"generated/Actuator2D/","page":"Actuator (2D)","title":"Actuator (2D)","text":"A 2D grid is a Cartesian product of two vectors","category":"page"},{"location":"generated/Actuator2D/","page":"Actuator (2D)","title":"Actuator (2D)","text":"n = 40\nx = LinRange(0.0, 10.0, 5n)\ny = LinRange(-2.0, 2.0, 2n)\nplot_grid(x, y)","category":"page"},{"location":"generated/Actuator2D/","page":"Actuator (2D)","title":"Actuator (2D)","text":"Actuator body force: A thrust coefficient Cₜ distributed over a thin rectangle","category":"page"},{"location":"generated/Actuator2D/","page":"Actuator (2D)","title":"Actuator (2D)","text":"xc, yc = 2.0, 0.0 # Disk center\nD = 1.0           # Disk diameter\nδ = 0.11          # Disk thickness\nCₜ = 5e-4         # Thrust coefficient\ncₜ = Cₜ / (D * δ)\ninside(x, y) = abs(x - xc) ≤ δ / 2 && abs(y - yc) ≤ D / 2\nbodyforce_u(x, y) = -cₜ * inside(x, y)\nbodyforce_v(x, y) = 0.0","category":"page"},{"location":"generated/Actuator2D/","page":"Actuator (2D)","title":"Actuator (2D)","text":"Build setup and assemble operators","category":"page"},{"location":"generated/Actuator2D/","page":"Actuator (2D)","title":"Actuator (2D)","text":"setup = Setup(\n    x,\n    y;\n    viscosity_model,\n    u_bc,\n    v_bc,\n    dudt_bc,\n    dvdt_bc,\n    bc_type,\n    bodyforce_u,\n    bodyforce_v,\n);\nnothing #hide","category":"page"},{"location":"generated/Actuator2D/","page":"Actuator (2D)","title":"Actuator (2D)","text":"Time interval","category":"page"},{"location":"generated/Actuator2D/","page":"Actuator (2D)","title":"Actuator (2D)","text":"t_start, t_end = tlims = (0.0, 12.0)","category":"page"},{"location":"generated/Actuator2D/","page":"Actuator (2D)","title":"Actuator (2D)","text":"Initial conditions (extend inflow)","category":"page"},{"location":"generated/Actuator2D/","page":"Actuator (2D)","title":"Actuator (2D)","text":"initial_velocity_u(x, y) = 1.0\ninitial_velocity_v(x, y) = 0.0\ninitial_pressure(x, y) = 0.0\nV₀, p₀ = create_initial_conditions(\n    setup,\n    initial_velocity_u,\n    initial_velocity_v,\n    t_start;\n    initial_pressure,\n);\nnothing #hide","category":"page"},{"location":"generated/Actuator2D/","page":"Actuator (2D)","title":"Actuator (2D)","text":"Iteration processors","category":"page"},{"location":"generated/Actuator2D/","page":"Actuator (2D)","title":"Actuator (2D)","text":"processors = (\n    field_plotter(setup; nupdate = 1),\n    # energy_history_plotter(setup; nupdate = 10),\n    # energy_spectrum_plotter(setup; nupdate = 10),\n    # animator(setup, \"vorticity.mkv\"; nupdate = 4),\n    # vtk_writer(setup; nupdate = 10, dir = \"output/$name\", filename = \"solution\"),\n    # field_saver(setup; nupdate = 10),\n    step_logger(; nupdate = 1),\n);\nnothing #hide","category":"page"},{"location":"generated/Actuator2D/","page":"Actuator (2D)","title":"Actuator (2D)","text":"Solve unsteady problem","category":"page"},{"location":"generated/Actuator2D/","page":"Actuator (2D)","title":"Actuator (2D)","text":"V, p, outputs = solve_unsteady(\n    setup,\n    V₀,\n    p₀,\n    tlims;\n    method = RK44P2(),\n    Δt = 0.05,\n    processors,\n    inplace = true,\n);\ncurrent_figure()","category":"page"},{"location":"generated/Actuator2D/#Post-process","page":"Actuator (2D)","title":"Post-process","text":"","category":"section"},{"location":"generated/Actuator2D/","page":"Actuator (2D)","title":"Actuator (2D)","text":"We may visualize or export the computed fields (V, p).","category":"page"},{"location":"generated/Actuator2D/","page":"Actuator (2D)","title":"Actuator (2D)","text":"We create a box to visualize the actuator.","category":"page"},{"location":"generated/Actuator2D/","page":"Actuator (2D)","title":"Actuator (2D)","text":"box = (\n    [xc - δ / 2, xc - δ / 2, xc + δ / 2, xc + δ / 2, xc - δ / 2],\n    [yc + D / 2, yc - D / 2, yc - D / 2, yc + D / 2, yc + D / 2],\n)","category":"page"},{"location":"generated/Actuator2D/","page":"Actuator (2D)","title":"Actuator (2D)","text":"Export to VTK","category":"page"},{"location":"generated/Actuator2D/","page":"Actuator (2D)","title":"Actuator (2D)","text":"save_vtk(setup, V, p, t_end, \"output/solution\")","category":"page"},{"location":"generated/Actuator2D/","page":"Actuator (2D)","title":"Actuator (2D)","text":"Plot pressure","category":"page"},{"location":"generated/Actuator2D/","page":"Actuator (2D)","title":"Actuator (2D)","text":"fig = plot_pressure(setup, p)\nlines!(box...; color = :red)\nfig","category":"page"},{"location":"generated/Actuator2D/","page":"Actuator (2D)","title":"Actuator (2D)","text":"Plot velocity","category":"page"},{"location":"generated/Actuator2D/","page":"Actuator (2D)","title":"Actuator (2D)","text":"fig = plot_velocity(setup, V, t_end)\nlines!(box...; color = :red)\nfig","category":"page"},{"location":"generated/Actuator2D/","page":"Actuator (2D)","title":"Actuator (2D)","text":"Plot vorticity","category":"page"},{"location":"generated/Actuator2D/","page":"Actuator (2D)","title":"Actuator (2D)","text":"fig = plot_vorticity(setup, V, t_end)\nlines!(box...; color = :red)\nfig","category":"page"},{"location":"generated/Actuator2D/","page":"Actuator (2D)","title":"Actuator (2D)","text":"Plot streamfunction","category":"page"},{"location":"generated/Actuator2D/","page":"Actuator (2D)","title":"Actuator (2D)","text":"fig = plot_streamfunction(setup, V, t_end)\nlines!(box...; color = :red)\nfig","category":"page"},{"location":"generated/Actuator2D/","page":"Actuator (2D)","title":"Actuator (2D)","text":"Plot force","category":"page"},{"location":"generated/Actuator2D/","page":"Actuator (2D)","title":"Actuator (2D)","text":"fig = plot_force(setup, t_end)\nlines!(box...; color = :red)\nfig","category":"page"},{"location":"generated/Actuator2D/","page":"Actuator (2D)","title":"Actuator (2D)","text":"","category":"page"},{"location":"generated/Actuator2D/","page":"Actuator (2D)","title":"Actuator (2D)","text":"This page was generated using Literate.jl.","category":"page"},{"location":"features/les/#Large-eddy-simulation","page":"Large eddy simulation","title":"Large eddy simulation","text":"","category":"section"},{"location":"features/les/","page":"Large eddy simulation","title":"Large eddy simulation","text":"Depending on the problem specification, a given grid resolution may not be sufficient to resolve all spatial features of the flow. Consider the following example:","category":"page"},{"location":"features/les/","page":"Large eddy simulation","title":"Large eddy simulation","text":"(Image: Resolution)","category":"page"},{"location":"features/les/","page":"Large eddy simulation","title":"Large eddy simulation","text":"On the left, the grid spacing is too large to capt the smallest eddies in the flow. These eddies create sub-grid stresses that also affect the large scale features. The grid must be refined if we want to compute these stresses exactly.","category":"page"},{"location":"features/les/","page":"Large eddy simulation","title":"Large eddy simulation","text":"On the right, the smallest spatial feature of the flow is fully resolved, and there are no sub-grid stresses. The equations can be solved without worrying about errors from unresolved features. This is known as Direct Numerical Simulation (DNS).","category":"page"},{"location":"features/les/","page":"Large eddy simulation","title":"Large eddy simulation","text":"If refining the grid is too costly, a closure model can be used to predict the sub-grid stresses. The models only give an estimate for these stresses, and may need to be calibrated to the given problem. When used correctly, they can predict the evolution of the large fluid motions without computing the sub-grid motions themselves. This is known as Large Eddy Simulation (LES).","category":"page"},{"location":"features/les/","page":"Large eddy simulation","title":"Large eddy simulation","text":"Eddy viscosity models add a local contribution to the global baseline viscosity. The baseline viscosity models transfer of energy from resolved to atomic scales. The new turbulent viscosity on the other hand, models energy transfer from resolved to unresolved scales. This non-constant field is computed from the local velocity field.","category":"page"},{"location":"features/les/","page":"Large eddy simulation","title":"Large eddy simulation","text":"The following eddy viscosity models are available:","category":"page"},{"location":"features/les/","page":"Large eddy simulation","title":"Large eddy simulation","text":"SmagorinskyModel\nQRModel\nMixingLengthModel","category":"page"},{"location":"features/les/","page":"Large eddy simulation","title":"Large eddy simulation","text":"In addition, the default LaminarModel assumes that there are no sub-grid stresses. It can be used if the grid is sufficiently refined for the given flow. It has the advantage of having a constant diffusion operator.","category":"page"},{"location":"","page":"Home","title":"Home","text":"(Image: Logo)","category":"page"},{"location":"#IncompressibleNavierStokes","page":"Home","title":"IncompressibleNavierStokes","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"IncompressibleNavierStokes is a package providing energy-conserving solvers for the incompressible Navier-Stokes equations on a staggered Cartesian grid. It is based on the Matlab package INS2D/INS3D.","category":"page"},{"location":"api/api/","page":"API","title":"API","text":"CurrentModule = IncompressibleNavierStokes","category":"page"},{"location":"api/api/#API-Reference","page":"API","title":"API Reference","text":"","category":"section"},{"location":"api/api/","page":"API","title":"API","text":"IncompressibleNavierStokes\nSetup","category":"page"},{"location":"api/api/#IncompressibleNavierStokes.IncompressibleNavierStokes","page":"API","title":"IncompressibleNavierStokes.IncompressibleNavierStokes","text":"IncompressibleNavierStokes\n\nEnergy-conserving solvers for the incompressible Navier-Stokes equations.\n\n\n\n\n\n","category":"module"},{"location":"api/api/#IncompressibleNavierStokes.Setup","page":"API","title":"IncompressibleNavierStokes.Setup","text":"Setup(\n    x, y;\n    viscosity_model = LaminarModel(; Re = 1000),\n    convection_model = NoRegConvectionModel(),\n    u_bc = (x, y, t) -> 0,\n    v_bc = (x, y, t) -> 0,\n    dudt_bc = nothing,\n    dvdt_bc = nothing,\n    bc_type = (;\n        u = (; x = (:periodic, :periodic), y = (:periodic, :periodic)),\n        v = (; x = (:periodic, :periodic), y = (:periodic, :periodic)),\n    ),\n    order4 = false,\n    bodyforce_u = (x, y) -> 0,\n    bodyforce_v = (x, y) -> 0,\n)\n\nCreate 2D setup.\n\n\n\n\n\nSetup(\n    x, y, z;\n    viscosity_model = LaminarModel(; Re = 1000),\n    convection_model = NoRegConvectionModel(),\n    u_bc = (x, y, w, t) -> 0.0,\n    v_bc = (x, y, w, t) -> 0.0,\n    w_bc = (x, y, w, t) -> 0.0,\n    dudt_bc = nothing,\n    dvdt_bc = nothing,\n    dwdt_bc = nothing,\n    bc_type = (;\n        u = (;\n            x = (:periodic, :periodic),\n            y = (:periodic, :periodic),\n            z = (:periodic, :periodic),\n        ),\n        v = (;\n            x = (:periodic, :periodic),\n            y = (:periodic, :periodic),\n            z = (:periodic, :periodic),\n        ),\n        w = (;\n            x = (:periodic, :periodic),\n            y = (:periodic, :periodic),\n            z = (:periodic, :periodic),\n        ),\n        ν = (;\n            x = (:periodic, :periodic),\n            y = (:periodic, :periodic),\n            z = (:periodic, :periodic),\n        ),\n    ),\n    order4 = false,\n    bodyforce_u = (x, y, z) -> 0,\n    bodyforce_v = (x, y, z) -> 0,\n    bodyforce_w = (x, y, z) -> 0,\n)\n\nCreate 3D setup.\n\n\n\n\n\n","category":"function"},{"location":"api/api/#Boundary-conditions","page":"API","title":"Boundary conditions","text":"","category":"section"},{"location":"api/api/","page":"API","title":"API","text":"BoundaryConditions\nget_bc_vectors","category":"page"},{"location":"api/api/#IncompressibleNavierStokes.BoundaryConditions","page":"API","title":"IncompressibleNavierStokes.BoundaryConditions","text":"BoundaryConditions(u_bc, v_bc; T = Float64, bc_unsteady, bc_type, kwargs...)\n\nCreate discrete boundary condtions.\n\nValues should either be scalars or vectors. All values (u, v, p, k, e) are defined at (x, y) locations, i.e. the corners of pressure volumes, so they cover the entire domain, including corners.\n\n\n\n\n\nBoundaryConditions(u_bc, v_bc, w_bc; T = Float64, bc_unsteady, bc_type, kwargs...)\n\nCreate discrete boundary condtions.\n\nValues should either be scalars or vectors. All values (u, v, p, k, e) are defined at (x, y, z) locations, i.e. the corners of pressure volumes, so they cover the entire domain, including corners.\n\n\n\n\n\n","category":"function"},{"location":"api/api/#IncompressibleNavierStokes.get_bc_vectors","page":"API","title":"IncompressibleNavierStokes.get_bc_vectors","text":"get_bc_vectors(setup, t)\n\nGet boundary condition vectors.\n\n\n\n\n\n","category":"function"},{"location":"api/api/#Force","page":"API","title":"Force","text":"","category":"section"},{"location":"api/api/","page":"API","title":"API","text":"SteadyBodyForce","category":"page"},{"location":"api/api/#IncompressibleNavierStokes.SteadyBodyForce","page":"API","title":"IncompressibleNavierStokes.SteadyBodyForce","text":"SteadyBodyForce(fu, fv, grid)\n\nTwo-dimensional steady body force f(x, y) = [fu(x, y), fv(x, y)]. \n\n\n\n\n\nSteadyBodyForce(fu, fv, fw, grid)\n\nThree-dimensional steady body force f(x, y, z) = [fu(x, y, z), fv(x, y, z), fw(x, y, z)]. \n\n\n\n\n\n","category":"function"},{"location":"api/api/#Grid","page":"API","title":"Grid","text":"","category":"section"},{"location":"api/api/","page":"API","title":"API","text":"Dimension\nGrid\ncosine_grid\nmax_size\nstretched_grid","category":"page"},{"location":"api/api/#IncompressibleNavierStokes.Dimension","page":"API","title":"IncompressibleNavierStokes.Dimension","text":"Dimension(N)\n\nRepresent an N-dimensional space. Returns N when called.\n\njulia> d = Dimension(3)\nDimension{3}()\n\njulia> d()\n3\n\n\n\n\n\n","category":"type"},{"location":"api/api/#IncompressibleNavierStokes.Grid","page":"API","title":"IncompressibleNavierStokes.Grid","text":"Grid(x, y; boundary_conditions, order4 = false)\n\nCreate nonuniform Cartesian box mesh x × y with boundary conditions boundary_conditions. If order4 is true, a fourth order mesh is created.\n\n\n\n\n\nGrid(x, y, z; boundary_conditions, order4 = false)\n\nCreate nonuniform Cartesian box mesh x × y × z with boundary conditions boundary_conditions. If order4 is true, a fourth order mesh is created.\n\n\n\n\n\n","category":"function"},{"location":"api/api/#IncompressibleNavierStokes.cosine_grid","page":"API","title":"IncompressibleNavierStokes.cosine_grid","text":"cosine_grid(a, b, N)\n\nCreate a nonuniform grid of N + 1 points from a to b using a cosine profile, i.e.\n\nx_i = a + frac12 left( 1 - cos left( pi fracin right) right)\n(b - a) quad i = 0 dots N\n\nSee also stretched_grid.\n\n\n\n\n\n","category":"function"},{"location":"api/api/#IncompressibleNavierStokes.max_size","page":"API","title":"IncompressibleNavierStokes.max_size","text":"max_size(grid)\n\nGet size of the largest grid element.\n\n\n\n\n\n","category":"function"},{"location":"api/api/#IncompressibleNavierStokes.stretched_grid","page":"API","title":"IncompressibleNavierStokes.stretched_grid","text":"stretched_grid(a, b, N, s = 1)\n\nCreate a nonuniform grid of N + 1 points from a to b with a stretch factor of s. If s = 1, return a uniform spacing from a to b. Otherwise, return a vector x in mathbbR^N + 1 such that x_n = a + sum_i = 1^n s^i - 1 h for n = 0 dots  N. Setting x_N = b then gives h = (b - a) frac1 - s1 - s^N, resulting in\n\nx_n = a + (b - a) frac1 - s^n1 - s^N quad n = 0 dots N\n\nNote that stretched_grid(a, b, N, s)[n] corresponds to x_n - 1.\n\nSee also cosine_grid.\n\n\n\n\n\n","category":"function"},{"location":"api/api/#Visocosity-Models","page":"API","title":"Visocosity Models","text":"","category":"section"},{"location":"api/api/","page":"API","title":"API","text":"AbstractViscosityModel\nLaminarModel\nMixingLengthModel\nSmagorinskyModel\nQRModel","category":"page"},{"location":"api/api/#IncompressibleNavierStokes.AbstractViscosityModel","page":"API","title":"IncompressibleNavierStokes.AbstractViscosityModel","text":"AbstractViscosityModel\n\nAbstract viscosity model.\n\n\n\n\n\n","category":"type"},{"location":"api/api/#IncompressibleNavierStokes.LaminarModel","page":"API","title":"IncompressibleNavierStokes.LaminarModel","text":"LaminarModel(Re)\n\nLaminar model with Reynolds number Re.\n\n\n\n\n\n","category":"type"},{"location":"api/api/#IncompressibleNavierStokes.MixingLengthModel","page":"API","title":"IncompressibleNavierStokes.MixingLengthModel","text":"MixingLengthModel(Re)\n\nMixing-length model with Reynolds number Re and mixing length lm.\n\n\n\n\n\n","category":"type"},{"location":"api/api/#IncompressibleNavierStokes.SmagorinskyModel","page":"API","title":"IncompressibleNavierStokes.SmagorinskyModel","text":"SmagorinskyModel(Re, C_s = 0.17)\n\nSmagorinsky-Lilly model with Reynolds number Re and constant C_s.\n\n\n\n\n\n","category":"type"},{"location":"api/api/#IncompressibleNavierStokes.QRModel","page":"API","title":"IncompressibleNavierStokes.QRModel","text":"QR(Re)\n\nQR-model with Reynolds number Re.\n\n\n\n\n\n","category":"type"},{"location":"api/api/#Convection-Models","page":"API","title":"Convection Models","text":"","category":"section"},{"location":"api/api/","page":"API","title":"API","text":"AbstractConvectionModel\nNoRegConvectionModel\nC2ConvectionModel\nC4ConvectionModel\nLerayConvectionModel","category":"page"},{"location":"api/api/#IncompressibleNavierStokes.AbstractConvectionModel","page":"API","title":"IncompressibleNavierStokes.AbstractConvectionModel","text":"AbstractConvectionModel\n\nAbstract convection model.\n\n\n\n\n\n","category":"type"},{"location":"api/api/#IncompressibleNavierStokes.NoRegConvectionModel","page":"API","title":"IncompressibleNavierStokes.NoRegConvectionModel","text":"NoRegConvection()\n\nUnregularized convection model.\n\n\n\n\n\n","category":"type"},{"location":"api/api/#IncompressibleNavierStokes.C2ConvectionModel","page":"API","title":"IncompressibleNavierStokes.C2ConvectionModel","text":"C2ConvectionModel()\n\nC2 regularization convection model.\n\n\n\n\n\n","category":"type"},{"location":"api/api/#IncompressibleNavierStokes.C4ConvectionModel","page":"API","title":"IncompressibleNavierStokes.C4ConvectionModel","text":"C4ConvectionModel()\n\nC4 regularization convection model.\n\n\n\n\n\n","category":"type"},{"location":"api/api/#IncompressibleNavierStokes.LerayConvectionModel","page":"API","title":"IncompressibleNavierStokes.LerayConvectionModel","text":"LerayConvectionModel()\n\nLeray regularization convection model.\n\n\n\n\n\n","category":"type"},{"location":"api/api/#Momentum","page":"API","title":"Momentum","text":"","category":"section"},{"location":"api/api/","page":"API","title":"API","text":"MomentumCache\ncheck_symmetry\ncompute_conservation\nconvection\nconvection!\nconvection_components\nconvection_components!\ndiffusion\ndiffusion!\nmomentum\nmomentum!\nmomentum_allstage\nmomentum_allstage!\nstrain_tensor\nturbulent_K\nturbulent_viscosity","category":"page"},{"location":"api/api/#IncompressibleNavierStokes.MomentumCache","page":"API","title":"IncompressibleNavierStokes.MomentumCache","text":"MomentumCache(setup)\n\nPreallocation structure for terms in the momentum equations.\n\n\n\n\n\n","category":"function"},{"location":"api/api/#IncompressibleNavierStokes.check_symmetry","page":"API","title":"IncompressibleNavierStokes.check_symmetry","text":"check_symmetry(V, t, setup, ϵ = 1e-14)\n\nCheck symmetry of convection operator.\n\nflag = 0: no symmetry error flag = 1: symmetry error\n\n\n\n\n\n","category":"function"},{"location":"api/api/#IncompressibleNavierStokes.compute_conservation","page":"API","title":"IncompressibleNavierStokes.compute_conservation","text":"compute_conservation(V, t, setup; bc_vectors = nothing)\n\nCompute mass, momentum and energy conservation properties of velocity field.\n\n\n\n\n\n","category":"function"},{"location":"api/api/#IncompressibleNavierStokes.convection","page":"API","title":"IncompressibleNavierStokes.convection","text":"convection(\n    model, V, ϕ, setup;\n    bc_vectors,\n    get_jacobian = false,\n    newton_factor = false,\n)\n\nEvaluate convective terms c and, optionally, Jacobian ∇c = ∂c/∂V, using the convection model model. The convected quantity is ϕ (usually ϕ = V).\n\nNon-mutating/allocating/out-of-place version.\n\nSee also convection!.\n\n\n\n\n\n","category":"function"},{"location":"api/api/#IncompressibleNavierStokes.convection!","page":"API","title":"IncompressibleNavierStokes.convection!","text":"convection!(\n    model, c, ∇c, V, ϕ, setup, cache;\n    bc_vectors,\n    get_jacobian = false,\n    newton_factor = false,\n)\n\nEvaluate convective terms c and, optionally, Jacobian ∇c = ∂c/∂V, using the convection model model. The convected quantity is ϕ (usually ϕ = V).\n\nMutating/non-allocating/in-place version.\n\nSee also convection.\n\n\n\n\n\n","category":"function"},{"location":"api/api/#IncompressibleNavierStokes.convection_components","page":"API","title":"IncompressibleNavierStokes.convection_components","text":"convection_components(\n    V, ϕ, setup;\n    bc_vectors,\n    get_jacobian = false,\n    newton_factor = false,\n    order4 = false,\n)\n\nCompute convection components.\n\nNon-mutating/allocating/out-of-place version.\n\nSee also convection_components!.\n\n\n\n\n\n","category":"function"},{"location":"api/api/#IncompressibleNavierStokes.convection_components!","page":"API","title":"IncompressibleNavierStokes.convection_components!","text":"convection_components!(\n    c, ∇c, V, ϕ, setup, cache;\n    bc_vectors,\n    get_jacobian = false,\n    newton_factor = false,\n    order4 = false,\n)\n\nCompute convection components.\n\nMutating/non-allocating/in-place version.\n\nSee also convection_components.\n\n\n\n\n\n","category":"function"},{"location":"api/api/#IncompressibleNavierStokes.diffusion","page":"API","title":"IncompressibleNavierStokes.diffusion","text":"diffusion!(model, V, setup; bc_vectors, get_jacobian = false)\n\nEvaluate diffusive terms d and optionally Jacobian ∇d = ∂d/∂V using viscosity model model.\n\nNon-mutating/allocating/out-of-place version.\n\nSee also diffusion!.\n\n\n\n\n\n","category":"function"},{"location":"api/api/#IncompressibleNavierStokes.diffusion!","page":"API","title":"IncompressibleNavierStokes.diffusion!","text":"diffusion!(model, d, ∇d, V, setup; bc_vectors, get_jacobian = false)\n\nEvaluate diffusive terms d and optionally Jacobian ∇d = ∂d/∂V using viscosity model model.\n\n\n\n\n\n","category":"function"},{"location":"api/api/#IncompressibleNavierStokes.momentum","page":"API","title":"IncompressibleNavierStokes.momentum","text":"momentum(\n    V, ϕ, p, t, setup;\n    bc_vectors = nothing,\n    get_jacobian = false,\n    nopressure = false,\n    newton_factor = false,\n)\n\nCalculate RHS of momentum equations and, optionally, Jacobian with respect to velocity field.\n\nV: velocity field\nϕ: convected field: e.g. fracpartial (phi_x V)partial x + fracpartial (phi_y V)partial y; usually ϕ = V (so ϕx = u, ϕy = v)\np: pressure\nbc_vectors: boundary condition vectors y\nget_jacobian: return ∇F = ∂F/∂V\nnopressure: exclude pressure gradient; in this case input argument p is not used\nnewton_factor\n\nNon-mutating/allocating/out-of-place version.\n\nSee also momentum!.\n\n\n\n\n\n","category":"function"},{"location":"api/api/#IncompressibleNavierStokes.momentum!","page":"API","title":"IncompressibleNavierStokes.momentum!","text":"momentum!(F, ∇F, V, ϕ, p, t, setup, cache; get_jacobian = false, nopressure = false)\n\nCalculate rhs of momentum equations and, optionally, Jacobian with respect to velocity field.\n\nV: velocity field\nϕ: convected field: e.g. fracpartial (phi_x V)partial x + fracpartial (phi_y V)partial y; usually ϕ = V (so ϕx = u, ϕy = v)\np: pressure\nbc_vectors: boundary condition vectors y\nget_jacobian: return ∇F = ∂F/∂V\nnopressure: exclude pressure gradient; in this case input argument p is not used\nnewton_factor\n\nMutating/non-allocating/in-place version.\n\nSee also momentum.\n\n\n\n\n\n","category":"function"},{"location":"api/api/#IncompressibleNavierStokes.momentum_allstage","page":"API","title":"IncompressibleNavierStokes.momentum_allstage","text":"momentum_allstage(Vⱼ, ϕⱼ, pⱼ, tⱼ, setup; bc_vectors, nstage, get_jacobian = false)\n\nCall momentum for multiple (Vⱼ, pⱼ) pairs, as required in implicit RK methods.\n\nNon-mutating/allocating/out-of-place version.\n\nSee also momentum_allstage!.\n\n\n\n\n\n","category":"function"},{"location":"api/api/#IncompressibleNavierStokes.momentum_allstage!","page":"API","title":"IncompressibleNavierStokes.momentum_allstage!","text":"momentum_allstage!(\n    Fⱼ,\n    ∇Fⱼ,\n    Vⱼ,\n    ϕⱼ,\n    pⱼ,\n    tⱼ,\n    setup,\n    cache,\n    momentum_cache;\n    bc_vectors,\n    nstage,\n    get_jacobian = false,\n)\n\nCall momentum for multiple (V, p) pairs, as required in implicit RK methods.\n\nMutating/non-allocating/in-place version.\n\nSee also momentum_allstage.\n\n\n\n\n\n","category":"function"},{"location":"api/api/#IncompressibleNavierStokes.strain_tensor","page":"API","title":"IncompressibleNavierStokes.strain_tensor","text":"strain_tensor(V, setup; bc_vectors, get_jacobian = false, get_S_abs = false)\n\nEvaluate rate of strain tensor S(V) and its magnitude.\n\n\n\n\n\n","category":"function"},{"location":"api/api/#IncompressibleNavierStokes.turbulent_K","page":"API","title":"IncompressibleNavierStokes.turbulent_K","text":"turbulent_K(model, setup)\n\nCompute the constant part of the turbulent viscosity.\n\n\n\n\n\n","category":"function"},{"location":"api/api/#IncompressibleNavierStokes.turbulent_viscosity","page":"API","title":"IncompressibleNavierStokes.turbulent_viscosity","text":"turbulent_viscosity(model, setup, S_abs)\n\nCompute turbulent viscosity based on S_abs.\n\n\n\n\n\n","category":"function"},{"location":"api/api/#Operators","page":"API","title":"Operators","text":"","category":"section"},{"location":"api/api/","page":"API","title":"API","text":"Operators\noperator_averaging\noperator_convection_diffusion\noperator_divergence\noperator_interpolation\noperator_postprocessing\noperator_regularization\noperator_turbulent_diffusion\noperator_viscosity\noperator_filter","category":"page"},{"location":"api/api/#IncompressibleNavierStokes.Operators","page":"API","title":"IncompressibleNavierStokes.Operators","text":"Operators(grid, boundary_conditions, viscosity_model)\n\nBuild operators.\n\n\n\n\n\n","category":"function"},{"location":"api/api/#IncompressibleNavierStokes.operator_averaging","page":"API","title":"IncompressibleNavierStokes.operator_averaging","text":"operator_averaging(grid, boundary_conditions)\n\nConstruct averaging operators.\n\n\n\n\n\n","category":"function"},{"location":"api/api/#IncompressibleNavierStokes.operator_convection_diffusion","page":"API","title":"IncompressibleNavierStokes.operator_convection_diffusion","text":"operator_convection_diffusion(grid, boundary_conditions)\n\nConstruct convection and diffusion operators.\n\n\n\n\n\n","category":"function"},{"location":"api/api/#IncompressibleNavierStokes.operator_divergence","page":"API","title":"IncompressibleNavierStokes.operator_divergence","text":"operator_divergence(grid, boundary_conditions)\n\nConstruct divergence and gradient operator.\n\n\n\n\n\n","category":"function"},{"location":"api/api/#IncompressibleNavierStokes.operator_interpolation","page":"API","title":"IncompressibleNavierStokes.operator_interpolation","text":"operator_interpolation(grid, boundary_conditions)\n\nConstruct interpolation operators.\n\n\n\n\n\n","category":"function"},{"location":"api/api/#IncompressibleNavierStokes.operator_postprocessing","page":"API","title":"IncompressibleNavierStokes.operator_postprocessing","text":"operator_postprocessing(grid, boundary_conditions)\n\nConstruct postprocessing operators such as vorticity.\n\n\n\n\n\n","category":"function"},{"location":"api/api/#IncompressibleNavierStokes.operator_regularization","page":"API","title":"IncompressibleNavierStokes.operator_regularization","text":"operator_regularization(grid, operators)\n\nBuild regularization matrices.\n\n\n\n\n\n","category":"function"},{"location":"api/api/#IncompressibleNavierStokes.operator_turbulent_diffusion","page":"API","title":"IncompressibleNavierStokes.operator_turbulent_diffusion","text":"operator_turbulent_diffusion(grid, boundary_conditions)\n\nAverage (turbulent) viscosity to cell faces: from ν at xp, yp to ν at ux, uy, vx, vy locations.\n\n\n\n\n\n","category":"function"},{"location":"api/api/#IncompressibleNavierStokes.operator_viscosity","page":"API","title":"IncompressibleNavierStokes.operator_viscosity","text":"operator_viscosity(viscosity_model, grid, boundary_conditions)\n\nClassical turbulence modelling via the diffusive term\n\n\n\n\n\n","category":"function"},{"location":"api/api/#IncompressibleNavierStokes.operator_filter","page":"API","title":"IncompressibleNavierStokes.operator_filter","text":"operator_filter(grid, boundary_conditions)\n\nConstruct filtering operator.\n\n\n\n\n\n","category":"function"},{"location":"api/api/#Postprocess","page":"API","title":"Postprocess","text":"","category":"section"},{"location":"api/api/","page":"API","title":"API","text":"get_streamfunction\nget_velocity\nget_vorticity\nvorticity!\nplot_force\nplot_grid\nplot_pressure\nplot_streamfunction\nplot_velocity\nplot_vorticity\nsave_vtk","category":"page"},{"location":"api/api/#IncompressibleNavierStokes.get_streamfunction","page":"API","title":"IncompressibleNavierStokes.get_streamfunction","text":"get_streamfunction(setup, V, t)\n\nCompute streamfunction psi from a Poisson equation nabla^2 psi = -omega.\n\n\n\n\n\n","category":"function"},{"location":"api/api/#IncompressibleNavierStokes.get_velocity","page":"API","title":"IncompressibleNavierStokes.get_velocity","text":"get_velocity(setup, V, t)\n\nGet velocity values at pressure points. Interpolate velocities to pressure positions using BMx and BMy (and BMz), constructed in operator_divergence.jl.\n\n\n\n\n\n","category":"function"},{"location":"api/api/#IncompressibleNavierStokes.get_vorticity","page":"API","title":"IncompressibleNavierStokes.get_vorticity","text":"get_vorticity(setup, V, t)\n\nGet vorticity from velocity field.\n\n\n\n\n\n","category":"function"},{"location":"api/api/#IncompressibleNavierStokes.vorticity!","page":"API","title":"IncompressibleNavierStokes.vorticity!","text":"vorticity!(ω, V, t, setup)\n\nCompute vorticity values at pressure midpoints. This should be consistent with operator_postprocessing.jl.\n\n\n\n\n\n","category":"function"},{"location":"api/api/#IncompressibleNavierStokes.plot_force","page":"API","title":"IncompressibleNavierStokes.plot_force","text":"plot_force(setup, t; kwargs...)\n\nPlot body force.\n\n\n\n\n\n","category":"function"},{"location":"api/api/#IncompressibleNavierStokes.plot_grid","page":"API","title":"IncompressibleNavierStokes.plot_grid","text":"plot_grid(x, y)\nplot_grid(x, y, z)\nplot_grid(grid)\n\nPlot nonuniform Cartesian grid.\n\n\n\n\n\n","category":"function"},{"location":"api/api/#IncompressibleNavierStokes.plot_pressure","page":"API","title":"IncompressibleNavierStokes.plot_pressure","text":"plot_pressure(setup, p; kwargs...)\n\nPlot pressure.\n\n\n\n\n\n","category":"function"},{"location":"api/api/#IncompressibleNavierStokes.plot_streamfunction","page":"API","title":"IncompressibleNavierStokes.plot_streamfunction","text":"plot_streamfunction(setup, V, t; kwargs...)\n\nPlot streamfunction.\n\n\n\n\n\n","category":"function"},{"location":"api/api/#IncompressibleNavierStokes.plot_velocity","page":"API","title":"IncompressibleNavierStokes.plot_velocity","text":"plot_velocity(setup, V, t; kwargs...)\n\nPlot velocity.\n\n\n\n\n\n","category":"function"},{"location":"api/api/#IncompressibleNavierStokes.plot_vorticity","page":"API","title":"IncompressibleNavierStokes.plot_vorticity","text":"plot_vorticity(setup, V, t; kwargs...)\n\nPlot vorticity field.\n\n\n\n\n\n","category":"function"},{"location":"api/api/#IncompressibleNavierStokes.save_vtk","page":"API","title":"IncompressibleNavierStokes.save_vtk","text":"save_vtk(setup, V, p, t, filename = \"output/solution\")\n\nSave velocity and pressure field to a VTK file.\n\nIn the case of a 2D setup, the velocity field is saved as a 3D vector with a z-component of zero, as this seems to be preferred by ParaView.\n\n\n\n\n\n","category":"function"},{"location":"api/api/#Preprocess","page":"API","title":"Preprocess","text":"","category":"section"},{"location":"api/api/","page":"API","title":"API","text":"create_initial_conditions\nrandom_field","category":"page"},{"location":"api/api/#IncompressibleNavierStokes.create_initial_conditions","page":"API","title":"IncompressibleNavierStokes.create_initial_conditions","text":"create_initial_conditions(\n    setup,\n    initial_velocity_u,\n    initial_velocity_v,\n    [initial_velocity_w,]\n    t;\n    initial_pressure = nothing,\n    pressure_solver = DirectPressureSolver(setup),\n)\n\nCreate initial vectors at starting time t. If p_initial is a function instead of nothing, calculate compatible IC for the pressure.\n\n\n\n\n\n","category":"function"},{"location":"api/api/#IncompressibleNavierStokes.random_field","page":"API","title":"IncompressibleNavierStokes.random_field","text":"random_field(\n    setup, K;\n    A = 1_000_000,\n    σ = 30,\n    s = 5,\n    pressure_solver = DirectPressureSolver(setup),\n)\n\nCreate random field.\n\nK: Maximum wavenumber\nA: Eddy amplitude\nσ: Variance\ns Wavenumber offset before energy starts decaying\n\n\n\n\n\n","category":"function"},{"location":"api/api/#Processors","page":"API","title":"Processors","text":"","category":"section"},{"location":"api/api/","page":"API","title":"API","text":"step_logger\nvtk_writer\nfield_saver\nfield_plotter\nenergy_history_plotter\nenergy_spectrum_plotter\nanimator","category":"page"},{"location":"api/api/#IncompressibleNavierStokes.step_logger","page":"API","title":"IncompressibleNavierStokes.step_logger","text":"step_logger(; nupdate = 1)\n\nCreate processor that logs time step information.\n\n\n\n\n\n","category":"function"},{"location":"api/api/#IncompressibleNavierStokes.vtk_writer","page":"API","title":"IncompressibleNavierStokes.vtk_writer","text":"vtk_writer(setup; nupdate, dir = \"output\", filename = \"solution\")\n\nCreate processor that writes the solution every nupdate time steps to a VTK file. The resulting Paraview data collection file is stored in \"$dir/$filename.pvd\".\n\n\n\n\n\n","category":"function"},{"location":"api/api/#IncompressibleNavierStokes.field_saver","page":"API","title":"IncompressibleNavierStokes.field_saver","text":"field_saver(setup; nupdate = 1)\n\nCreate processor that stores the solution every nupdate time step to the vector of vectors V and p. The solution times are stored in the vector t.\n\n\n\n\n\n","category":"function"},{"location":"api/api/#IncompressibleNavierStokes.field_plotter","page":"API","title":"IncompressibleNavierStokes.field_plotter","text":"field_plotter(\n    setup;\n    fieldname = :vorticity,\n    type = nothing,\n    sleeptime = 0.001,\n    alpha = 0.05,\n)\n\nPlot the solution every time the state o is updated.\n\nThe sleeptime is slept at every update, to give Makie time to update the plot. Set this to nothing to skip sleeping.\n\nAvailable fieldnames are:\n\n:velocity,\n:vorticity,\n:streamfunction,\n:pressure.\n\nAvailable plot types for 2D are:\n\nheatmap (default),\ncontour,\ncontourf.\n\nAvailable plot types for 3D are:\n\ncontour (default).\n\nThe alpha value gets passed to contour in 3D.\n\n\n\n\n\n","category":"function"},{"location":"api/api/#IncompressibleNavierStokes.energy_history_plotter","page":"API","title":"IncompressibleNavierStokes.energy_history_plotter","text":"energy_history_plotter(setup)\n\nCreate energy history plot, with a history point added every time step_observer is updated.\n\n\n\n\n\n","category":"function"},{"location":"api/api/#IncompressibleNavierStokes.energy_spectrum_plotter","page":"API","title":"IncompressibleNavierStokes.energy_spectrum_plotter","text":"energy_spectrum_plotter(setup; nupdate = 1)\n\nCreate energy spectrum plot, redrawn every time step_observer is updated.\n\n\n\n\n\n","category":"function"},{"location":"api/api/#IncompressibleNavierStokes.animator","page":"API","title":"IncompressibleNavierStokes.animator","text":"animator(setup, path; nupdate = 1, plotter = field_plotter(setup); kwargs...)\n\nAnimate a plot of the solution every update iteration. The animation is saved to path, which should have one of the following extensions:\n\n\".mkv\"\n\".mp4\"\n\".webm\"\n\".gif\"\n\nThe plot is determined by a plotter processsor. Addtional kwargs are passed to Makie's VideoStream.\n\n\n\n\n\n","category":"function"},{"location":"api/api/#Solvers","page":"API","title":"Solvers","text":"","category":"section"},{"location":"api/api/","page":"API","title":"API","text":"get_timestep\nsolve_unsteady\nsolve_steady_state","category":"page"},{"location":"api/api/#IncompressibleNavierStokes.get_timestep","page":"API","title":"IncompressibleNavierStokes.get_timestep","text":"get_timestep(stepper, cfl; bc_vectors)\n\nEstimate time step based on eigenvalues of operators, using Gershgorin.\n\n\n\n\n\n","category":"function"},{"location":"api/api/#IncompressibleNavierStokes.solve_unsteady","page":"API","title":"IncompressibleNavierStokes.solve_unsteady","text":"function solve_unsteady(\n    setup, V₀, p₀, tlims;\n    method = RK44(; T = eltype(V₀)),\n    pressure_solver = DirectPressureSolver(setup),\n    Δt = nothing,\n    cfl = 1,\n    n_adapt_Δt = 1,\n    inplace = false,\n    processors = (),\n    device = identity,\n)\n\nSolve unsteady problem using method.\n\nIf Δt is a real number, it is rounded such that (t_end - t_start) / Δt is an integer. If Δt = nothing, the time step is chosen every n_adapt_Δt iteration with CFL-number cfl .\n\nEach processor is called after every processor.nupdate time step.\n\nAll arrays and operators are passed through the device function. This allows for performing computations on a different device than the host (CPU). To compute on an Nvidia GPU using CUDA, change\n\nsolve_unsteady(setup, V₀, p₀, tlims; kwargs...)\n\nto the following:\n\nusing CUDA\nsolve_unsteady(\n    setup, V₀, p₀, tlims;\n    device = cu,\n    kwargs...\n)\n\nNote that the state observable passed to the processor.initialize function contains vector living on the device, and you may have to move them back to the host using Array(V) and Array(p) in the processor.\n\n\n\n\n\n","category":"function"},{"location":"api/api/#IncompressibleNavierStokes.solve_steady_state","page":"API","title":"IncompressibleNavierStokes.solve_steady_state","text":"function solve_steady_state(\n    setup, V₀, p₀;\n    jacobian_type = :newton,\n    npicard = 2,\n    abstol = 1e-10,\n    maxiter = 10,\n)\n\nSolve steady state problem of the Navier-Stokes equations. This saddlepoint system arises from linearization of the convective terms.\n\nEach processor is called after every processor.nupdate iteration.\n\n\n\n\n\n","category":"function"},{"location":"api/api/#Pressure-solvers","page":"API","title":"Pressure solvers","text":"","category":"section"},{"location":"api/api/","page":"API","title":"API","text":"AbstractPressureSolver\nDirectPressureSolver\nCGPressureSolver\nSpectralPressureSolver\npressure_additional_solve\npressure_additional_solve!\npressure_poisson\npressure_poisson!","category":"page"},{"location":"api/api/#IncompressibleNavierStokes.AbstractPressureSolver","page":"API","title":"IncompressibleNavierStokes.AbstractPressureSolver","text":"AbstractPressureSolver\n\nPressure solver for the Poisson equation.\n\n\n\n\n\n","category":"type"},{"location":"api/api/#IncompressibleNavierStokes.DirectPressureSolver","page":"API","title":"IncompressibleNavierStokes.DirectPressureSolver","text":"DirectPressureSolver()\n\nDirect pressure solver using a LU decomposition.\n\n\n\n\n\n","category":"type"},{"location":"api/api/#IncompressibleNavierStokes.CGPressureSolver","page":"API","title":"IncompressibleNavierStokes.CGPressureSolver","text":"CGPressureSolver(setup; [abstol], [reltol], [maxiter])\n\nConjugate gradients iterative pressure solver.\n\n\n\n\n\n","category":"type"},{"location":"api/api/#IncompressibleNavierStokes.SpectralPressureSolver","page":"API","title":"IncompressibleNavierStokes.SpectralPressureSolver","text":"SpectralPressureSolver(setup)\n\nBuild spectral pressure solver from setup.\n\n\n\n\n\n","category":"type"},{"location":"api/api/#IncompressibleNavierStokes.pressure_additional_solve","page":"API","title":"IncompressibleNavierStokes.pressure_additional_solve","text":"pressure_additional_solve(pressure_solver, V, p, t, setup; bc_vectors = nothing)\n\nDo additional pressure solve. This makes the pressure compatible with the velocity field, resulting in same order pressure as velocity.\n\n\n\n\n\n","category":"function"},{"location":"api/api/#IncompressibleNavierStokes.pressure_additional_solve!","page":"API","title":"IncompressibleNavierStokes.pressure_additional_solve!","text":"pressure_additional_solve!(pressure_solver, V, p, t, setup, momentum_cache, F, f; bc_vectors)\n\nDo additional pressure solve. This makes the pressure compatible with the velocity field, resulting in same order pressure as velocity.\n\n\n\n\n\n","category":"function"},{"location":"api/api/#IncompressibleNavierStokes.pressure_poisson","page":"API","title":"IncompressibleNavierStokes.pressure_poisson","text":"pressure_poisson(solver, f)\n\nSolve the Poisson equation for the pressure with right hand side f at time t. For periodic and no-slip BC, the sum of f should be zero.\n\nNon-mutating/allocating/out-of-place version.\n\nSee also pressure_poisson!.\n\n\n\n\n\n","category":"function"},{"location":"api/api/#IncompressibleNavierStokes.pressure_poisson!","page":"API","title":"IncompressibleNavierStokes.pressure_poisson!","text":"pressure_poisson!(solver, p, f)\n\nSolve the Poisson equation for the pressure with right hand side f at time t. For periodic and no-slip BC, the sum of f should be zero.\n\nMutating/non-allocating/in-place version.\n\nSee also pressure_poisson.\n\n\n\n\n\n","category":"function"},{"location":"api/api/#Time-steppers","page":"API","title":"Time steppers","text":"","category":"section"},{"location":"api/api/","page":"API","title":"API","text":"AbstractODEMethod\nAbstractRungeKuttaMethod\nAdamsBashforthCrankNicolsonMethod\nOneLegMethod\nExplicitRungeKuttaMethod\nImplicitRungeKuttaMethod\n\nisexplicit\nlambda_conv_max\nlambda_diff_max\nnstage\node_method_cache\nrunge_kutta_method\nstep\nstep!","category":"page"},{"location":"api/api/#IncompressibleNavierStokes.AbstractODEMethod","page":"API","title":"IncompressibleNavierStokes.AbstractODEMethod","text":"AbstractODEMethod\n\nAbstract ODE method.\n\n\n\n\n\n","category":"type"},{"location":"api/api/#IncompressibleNavierStokes.AbstractRungeKuttaMethod","page":"API","title":"IncompressibleNavierStokes.AbstractRungeKuttaMethod","text":"AbstractRungeKuttaMethod\n\nAbstract Runge Kutta method.\n\n\n\n\n\n","category":"type"},{"location":"api/api/#IncompressibleNavierStokes.AdamsBashforthCrankNicolsonMethod","page":"API","title":"IncompressibleNavierStokes.AdamsBashforthCrankNicolsonMethod","text":"AdamsBashforthCrankNicolsonMethod(\n    T = Float64;\n    α₁ = T(3 // 2),\n    α₂ = T(-1 // 2),\n    θ = T(1 // 2),\n    p_add_solve = true,\n    method_startup = RK44(; T),\n)\n\nIMEX AB-CN: Adams-Bashforth for explicit convection (parameters α₁ and α₂) and Crank-Nicolson for implicit diffusion (implicitness θ). The method is second order for θ = 1/2.\n\nAdams-Bashforth for convection and Crank-Nicolson for diffusion formulation:\n\nbeginalign*\n(mathbfu^n+1 - mathbfu^n)  Δt  =\n    -(alpha_1 mathbfc^n + alpha_2 mathbfc^n-1) \n     + theta mathbfd^n+1 + (1-theta) mathbfd^n \n     + theta mathbfF^n+1 + (1-theta) mathbfF^n \n     + theta mathbfBC^n+1 + (1-theta) mathbfBC^n \n     - mathbfG mathbfp + mathbfy_p\nendalign*\n\nwhere BC are boundary conditions of diffusion. This is rewritten as:\n\nbeginalign*\n(frac1Delta t mathbfI - theta mathbfD) mathbfu^n+1  =\n    (frac1Delta t mathbfI - (1 - theta) mathbfD) mathbfu^n \n     - (alpha_1 mathbfc^n + alpha_2 mathbfc^n-1) \n     + theta mathbfF^n+1 + (1-theta) mathbfF^n \n     + theta mathbfBC^n+1 + (1-theta) mathbfBC^n \n     - mathbfG mathbfp + mathbfy_p\nendalign*\n\nThe LU decomposition of the LHS matrix is computed every time the time step changes.\n\nNote that, in constrast to explicit methods, the pressure from previous time steps has an influence on the accuracy of the velocity.\n\n\n\n\n\n","category":"type"},{"location":"api/api/#IncompressibleNavierStokes.OneLegMethod","page":"API","title":"IncompressibleNavierStokes.OneLegMethod","text":"OneLegMethod(\n    T = Float64;\n    β = T(1 // 2),\n    p_add_solve = true,\n    method_startup = RK44(; T),\n)\n\nExplicit one-leg β-method following symmetry-preserving discretization of turbulent flow. See [Verstappen and Veldman (JCP 2003)] for details, or [Direct numerical simulation of turbulence at lower costs (Journal of Engineering Mathematics 1997)].\n\nFormulation:\n\nfrac(beta + 12) u^n+1 - 2 beta u^n + (beta - 12) u^n-1Delta t = F((1 +\nbeta) u^n - beta u^n-1)\n\n\n\n\n\n","category":"type"},{"location":"api/api/#IncompressibleNavierStokes.ExplicitRungeKuttaMethod","page":"API","title":"IncompressibleNavierStokes.ExplicitRungeKuttaMethod","text":"ExplicitRungeKuttaMethod(; A, b, c, r, p_add_solve = true)\n\nExplicit Runge Kutta method.\n\n\n\n\n\n","category":"type"},{"location":"api/api/#IncompressibleNavierStokes.ImplicitRungeKuttaMethod","page":"API","title":"IncompressibleNavierStokes.ImplicitRungeKuttaMethod","text":"ImplicitRungeKuttaMethod(;\n    A,\n    b,\n    c,\n    r,\n    newton_type = :full,\n    maxiter = 10,\n    abstol = 1e-14,\n    reltol = 1e-14,\n    p_add_solve = true,\n)\n\nImplicit Runge Kutta method.\n\nThe implicit linear system is solved at each time step using Newton's method. The newton_type may be one of the following:\n\n:no: Replace iteration matrix with I/Δt (no Jacobian)\n:approximate: Build Jacobian once before iterations only\n:full: Build Jacobian at each iteration\n\n\n\n\n\n","category":"type"},{"location":"api/api/#IncompressibleNavierStokes.isexplicit","page":"API","title":"IncompressibleNavierStokes.isexplicit","text":"isexplicit(method)\n\nReturn true if method is explicit, i.e. the value at a certain time step is given explicitly as a function of the previous time steps only.\n\n\n\n\n\n","category":"function"},{"location":"api/api/#IncompressibleNavierStokes.lambda_conv_max","page":"API","title":"IncompressibleNavierStokes.lambda_conv_max","text":"lambda_conv_max(method)\n\nGet maximum value of stability region for the convection operator (not a very good indication for the methods that do not include the imaginary axis)\n\n\n\n\n\n","category":"function"},{"location":"api/api/#IncompressibleNavierStokes.lambda_diff_max","page":"API","title":"IncompressibleNavierStokes.lambda_diff_max","text":"lambda_diff_max(method)\n\nGet maximum value of stability region for the diffusion operator.\n\n\n\n\n\n","category":"function"},{"location":"api/api/#IncompressibleNavierStokes.nstage","page":"API","title":"IncompressibleNavierStokes.nstage","text":"nstage(rk_method)\n\nGet number of stages of the Runge-Kutta method.\n\n\n\n\n\n","category":"function"},{"location":"api/api/#IncompressibleNavierStokes.ode_method_cache","page":"API","title":"IncompressibleNavierStokes.ode_method_cache","text":"ode_method_cache(method, setup)\n\nGet time stepper cache for the given ODE method.\n\n\n\n\n\n","category":"function"},{"location":"api/api/#IncompressibleNavierStokes.runge_kutta_method","page":"API","title":"IncompressibleNavierStokes.runge_kutta_method","text":"runge_kutta_method(A, b, c, r; [p_add_solve], [newton_type], [maxiter], [abstol], [reltol])\n\nGet Runge Kutta method. The function checks whether the method is explicit.\n\np_add_solve: whether to add a pressure solve step to the method.\n\nFor implicit RK methods: newton_type, maxiter, abstol, reltol.\n\n\n\n\n\n","category":"function"},{"location":"api/api/#IncompressibleNavierStokes.step","page":"API","title":"IncompressibleNavierStokes.step","text":"step(stepper, Δt; bc_vectors = nothing)\n\nPerform one time step.\n\nNon-mutating/allocating/out-of-place version.\n\nSee also step!.\n\n\n\n\n\n","category":"function"},{"location":"api/api/#IncompressibleNavierStokes.step!","page":"API","title":"IncompressibleNavierStokes.step!","text":"step!(stepper, Δt; cache, momentum_cache, bc_vectors = nothing)\n\nPerform one time step>\n\nMutating/non-allocating/in-place version.\n\nSee also step.\n\n\n\n\n\n","category":"function"},{"location":"api/api/#Filter","page":"API","title":"Filter","text":"","category":"section"},{"location":"api/api/","page":"API","title":"API","text":"create_top_hat_u\ncreate_top_hat_v\ncreate_top_hat_p\ncreate_top_hat_velocity","category":"page"},{"location":"api/api/#IncompressibleNavierStokes.create_top_hat_u","page":"API","title":"IncompressibleNavierStokes.create_top_hat_u","text":"create_top_hat_u(N, M)\n\nN fine points and M coarse points in each dimension.\n\n\n\n\n\n","category":"function"},{"location":"api/api/#IncompressibleNavierStokes.create_top_hat_v","page":"API","title":"IncompressibleNavierStokes.create_top_hat_v","text":"create_top_hat_v(N, M)\n\nN fine points and M coarse points in each dimension.\n\n\n\n\n\n","category":"function"},{"location":"api/api/#IncompressibleNavierStokes.create_top_hat_p","page":"API","title":"IncompressibleNavierStokes.create_top_hat_p","text":"create_top_hat_p(N, M)\n\nN fine points and M coarse points in each dimension.\n\n\n\n\n\n","category":"function"},{"location":"api/api/#IncompressibleNavierStokes.create_top_hat_velocity","page":"API","title":"IncompressibleNavierStokes.create_top_hat_velocity","text":"create_top_hat_velocity(N, M)\n\nN fine points and M coarse points in each dimension.\n\n\n\n\n\n","category":"function"},{"location":"api/api/#Utils","page":"API","title":"Utils","text":"","category":"section"},{"location":"api/api/","page":"API","title":"API","text":"filter_convection\nfilter_convection!\nget_lims\nplotmat","category":"page"},{"location":"api/api/#IncompressibleNavierStokes.filter_convection","page":"API","title":"IncompressibleNavierStokes.filter_convection","text":"filter_convection(u, diff_matrix, bc, α)\n\nConstruct filter for convective terms.\n\nNon-mutating/allocating/out-of-place version.\n\nSee also filter_convection!.\n\n\n\n\n\n","category":"function"},{"location":"api/api/#IncompressibleNavierStokes.filter_convection!","page":"API","title":"IncompressibleNavierStokes.filter_convection!","text":"filter_convection!(ū, u, diff_matrix, bc, α)\n\nConstruct filter for convective terms.\n\nMutating/non-allocating/in-place version.\n\nSee also filter_convection.\n\n\n\n\n\n","category":"function"},{"location":"api/api/#IncompressibleNavierStokes.get_lims","page":"API","title":"IncompressibleNavierStokes.get_lims","text":"get_lims(x, n = 1.5)\n\nGet approximate lower and upper limits of a field x based on the mean and standard deviation (mu pm n sigma). If x is constant, a margin of 1e-4 is enforced. This is required for contour plotting functions that require a certain range.\n\n\n\n\n\n","category":"function"},{"location":"api/api/#IncompressibleNavierStokes.plotmat","page":"API","title":"IncompressibleNavierStokes.plotmat","text":"plotmat(A)\n\nPlot matrix.\n\n\n\n\n\n","category":"function"},{"location":"features/precision/#Floating-point-precision","page":"Floating point precision","title":"Floating point precision","text":"","category":"section"},{"location":"features/precision/","page":"Floating point precision","title":"Floating point precision","text":"IncompressibleNavierStokes generates efficient code for different floating point precisions, such as","category":"page"},{"location":"features/precision/","page":"Floating point precision","title":"Floating point precision","text":"Double precision (Float64)\nSingle precision (Float32)\nHalf precision (Float16)","category":"page"},{"location":"features/precision/","page":"Floating point precision","title":"Floating point precision","text":"To use single or half precision, all user input floats should be converted to the desired type. Mixing different precisions causes unnecessary conversions and may break the code. See the tutorial for an example on how to enforce floating point type hygiene.","category":"page"},{"location":"features/precision/","page":"Floating point precision","title":"Floating point precision","text":"note: GPU precision\nFor GPUs, single precision is preferred. CUDA.jls cu converts to single precision.","category":"page"},{"location":"features/precision/","page":"Floating point precision","title":"Floating point precision","text":"note: Pressure solvers\nSparseArrays.jls sparse matrix factorizations only support double precision. DirectPressureSolver only works for Float64. Consider using an iterative solver such as CGPressureSolver when using single or half precision.","category":"page"}]
}
